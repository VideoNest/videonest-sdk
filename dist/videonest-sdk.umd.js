!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("debug"),require("react")):"function"==typeof define&&define.amd?define(["exports","debug","react"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).VideonestSDK={},e.debugModule,e.React)}(this,(function(e,t,o){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function s(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(o){if("default"!==o){var r=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,r.get?r:{enumerable:!0,get:function(){return e[o]}})}})),t.default=e,Object.freeze(t)}var i=r(t),a=s(o);let n=!1;const d=i.default("videonest-sdk");const c=function(e,...t){n&&d(e,...t)};function l(e,...t){n&&(console.log(`[videonest-sdk] ${e}`,...t),d(e,...t))}class u{constructor(e){this.config=e,c("VideonestClient initialized with channelId:",e.channelId)}async uploadVideoDirectToS3(e,t,o,r,s,i){try{const a=t.length;l(`🚀 Starting S3 upload: ${e.name} (${a} parts)`);const n=new Array(a).fill(0),d=()=>{const e=n.reduce(((e,t)=>e+t),0);i(e/a)},c=t.map((async(t,o)=>{const r=o*s,i=Math.min(r+s,e.size),a=e.slice(r,i);if(0===a.size)throw new Error(`Empty chunk detected for part ${o+1}`);return new Promise(((e,r)=>{const s=new XMLHttpRequest;s.timeout=3e5,s.upload.onprogress=e=>{e.lengthComputable&&(n[o]=e.loaded/e.total*100,d())},s.onload=()=>{if(s.status>=200&&s.status<300){const t=s.getResponseHeader("ETag");if(!t)return void r(new Error(`No ETag received for part ${o+1}`));n[o]=100,d(),e({PartNumber:o+1,ETag:t.replace(/"/g,"")})}else r(new Error(`HTTP ${s.status}: Failed to upload part ${o+1}`))},s.onerror=()=>{r(new Error(`Network error uploading part ${o+1}`))},s.ontimeout=()=>{r(new Error(`Timeout uploading part ${o+1}`))},s.open("PUT",t),s.setRequestHeader("Content-Type","application/octet-stream"),s.send(a)}))})),u=(await Promise.all(c)).sort(((e,t)=>e.PartNumber-t.PartNumber));return l(`✅ S3 upload completed: ${e.name} (${u.length} parts)`),{success:!0,uploadId:o,s3Key:r,parts:u}}catch(t){return l(`❌ S3 upload failed for ${e.name}:`,t),{success:!1,error:t instanceof Error?t.message:"Upload failed",uploadId:o,s3Key:r,parts:[]}}}async uploadVideo(e,t){var o,r;l("Starting direct S3 video upload process"),l(`File: ${e.name}, size: ${e.size} bytes`);try{const{metadata:s,onProgress:i=(e,t)=>{},thumbnail:a}=t;if(!a)throw l("Error: Thumbnail is required"),i(0,"failed"),new Error("Thumbnail is required for video upload");l("all upload arguments:",{file:e,options:t,thumbnail:a});const n={...s,channelId:this.config.channelId};l("Upload metadata:",n),l("📡 Generating presigned URLs via SDK endpoint...");const d=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/generate-presigned-url`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},body:JSON.stringify({fileName:e.name,fileSize:e.size,contentType:e.type,metadata:n})});if(!d.ok)throw new Error(`Failed to generate presigned URLs: ${d.status}`);const c=await d.json();if(!c.success)throw new Error(c.error||"Failed to generate presigned URLs");l("✅ Presigned URLs generated successfully"),l("📤 Starting direct S3 upload..."),i(0,"uploading");const u=await this.uploadVideoDirectToS3(e,c.presignedUrls,c.uploadId,c.s3Key,c.chunkSize,(e=>{l(`Upload progress: ${e.toFixed(1)}%`),i(e,"uploading")}));if(l("🔍 Complete upload request details:",{endpoint:`https://api1.videonest.co/sdk/${this.config.channelId}/complete-upload`,uploadId:u.uploadId,s3Key:u.s3Key,parts:u.parts,partsCount:null===(o=u.parts)||void 0===o?void 0:o.length,firstPart:null===(r=u.parts)||void 0===r?void 0:r[0],authorization:`Bearer ${this.config.apiKey.substring(0,10)}...`}),!u.success)throw new Error(u.error||"S3 upload failed");l("✅ S3 upload completed, starting finalization..."),i(100,"finalizing"),l("🏁 Completing upload via SDK endpoint...");const p=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/complete-upload`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},body:JSON.stringify({uploadId:u.uploadId,s3Key:u.s3Key,parts:u.parts})});if(!p.ok)throw new Error(`Failed to complete upload: ${p.status}`);const h=await p.json();if(!h.success)throw new Error(h.message||"Upload completion failed");return l("🎉 Video record created successfully:",h.data.videoId),l("🖼️ Uploading user-provided thumbnail..."),await this.uploadThumbnail(a,h.data.videoId),l("✅ Upload process completed successfully"),{success:!0,message:"Video uploaded successfully",video:{id:h.data.videoId}}}catch(e){return l(`Upload error: ${e instanceof Error?e.message:"Unknown error"}`,e),{success:!1,message:e instanceof Error?e.message:"An unexpected error occurred during upload"}}}async uploadThumbnail(e,t){const o=new FormData;o.append("thumbnail",e);try{const e=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${t}/send-thumbnail`,{method:"POST",body:o,headers:{Authorization:`Bearer ${this.config.apiKey}`}}),r=await e.json();if(!r.success)throw new Error(r.message||"Thumbnail upload failed");return r}catch(e){throw new Error(e instanceof Error?e.message:"Failed to upload thumbnail")}}async getVideoStatus(e){try{const t=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${e}/status`,{method:"GET",headers:{Authorization:`Bearer ${this.config.apiKey}`}}),o=await t.json();if(!o.success)throw new Error(o.message||"Failed to get video status");return o}catch(e){throw new Error(e instanceof Error?e.message:"Failed to get video status")}}async listVideos(){try{const e=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`,{method:"GET",headers:{Authorization:`Bearer ${this.config.apiKey}`}});c(`Videos list response status: ${e.status}`);const t=await e.json();return c("Videos list response data:",t),t.success?(c(`Successfully retrieved ${t.videos?t.videos.length:0} videos`),t):(c(`Videos list fetch failed: ${t.message||"Unknown error"}`),{success:!1,message:t.message||"Failed to retrieve videos"})}catch(e){return c(`Videos list error: ${e instanceof Error?e.message:"Unknown error"}`,e),{success:!1,message:e instanceof Error?e.message:"Failed to retrieve videos"}}}}e.VideonestEmbed=({videoId:e,config:t,style:o={}})=>{const{primaryColor:r,secondaryColor:s,darkMode:i,width:n,height:d,showTitle:c,showDescription:l}=o;let u=`https://app.videonest.co/embed/single/${e}`;const p=[];return r&&p.push(`primary_color=${r.replace("#","")}`),s&&p.push(`secondary_color=${s.replace("#","")}`),i&&p.push("dark_mode=true"),c&&p.push("show_title=true"),l&&p.push("show_description=true"),p.push(`channel_id=${t.channelId}`),p.push(`api_key=${t.apiKey}`),p.length>0&&(u+=`?${p.join("&")}`),a.createElement("iframe",{src:u,style:{width:n||"100%",height:d||"100%"},frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:`Videonest video ${e}`})},e.VideonestPreview=({videoId:e,config:t,style:o={}})=>{const{primaryColor:r,secondaryColor:s,darkMode:i,width:n,height:d,showTitle:c,showDescription:l}=o;let u=`https://app.videonest.co/embed/preview/${e}`;const p=[];return r&&p.push(`primary_color=${r.replace("#","")}`),s&&p.push(`secondary_color=${s.replace("#","")}`),i&&p.push("dark_mode=true"),c&&p.push("show_title=true"),l&&p.push("show_description=true"),p.push(`channel_id=${t.channelId}`),p.push(`api_key=${t.apiKey}`),p.length>0&&(u+=`?${p.join("&")}`),a.createElement("iframe",{src:u,style:{width:n||"100%",height:d||"100%"},frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:`Videonest video ${e}`})},e.getVideoStatus=async function(e,t){return new u(t).getVideoStatus(e)},e.isDebugModeEnabled=function(){return n},e.listVideos=async function(e){return new u(e).listVideos()},e.setDebugMode=function(e){n=e,e?(i.default.enable("videonest-sdk"),"undefined"!=typeof window&&window.localStorage.setItem("debug","videonest-sdk")):(i.default.disable(),"undefined"!=typeof window&&window.localStorage.removeItem("debug"))},e.uploadVideo=async function(e,t,o){return new u(o).uploadVideo(e,t)},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=videonest-sdk.umd.js.map
