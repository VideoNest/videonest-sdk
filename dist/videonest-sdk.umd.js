!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("debug"),require("react")):"function"==typeof define&&define.amd?define(["exports","debug","react"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).VideonestSDK={},e.debugModule,e.React)}(this,(function(e,t,s){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function o(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(s){if("default"!==s){var i=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,i.get?i:{enumerable:!0,get:function(){return e[s]}})}})),t.default=e,Object.freeze(t)}var a=i(t),n=o(s);let r=!1;const d=a.default("videonest-sdk");const l=function(e,...t){r&&d(e,...t)};function u(e,...t){r&&(console.log(`[videonest-sdk] ${e}`,...t),d(e,...t))}function c(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}class h{constructor(){this.samples=[],this.avgSpeed=null}recordChunkUpload(e,t){const s=8*e/(t/1e3)/1e6;return this.samples.push(s),this.samples.length>5&&this.samples.shift(),this.avgSpeed=this.calculateWeightedAverage(this.samples),this.avgSpeed}calculateWeightedAverage(e){if(0===e.length)return 0;let t=0,s=0;return e.forEach(((e,i)=>{const o=i+1;t+=e*o,s+=o})),t/s}}class p{constructor(e,t,s){this.uploadQueue=[],this.activeUploads=new Map,this.completedChunks=new Set,this.failedChunks=new Set,this.speedDetector=new h,this.uploadId="",this.chunkBytesUploaded=new Map,this.totalBytesUploaded=0,this.startTime=0,this.lastProgressReport=0,this.file=e,this.metadata=t,this.config=s,this.chunkSize=function(e){let t;return t=e<52428800?8388608:e<524288e3?26214400:e<2147483648?52428800:104857600,Math.floor(t)}(e.size),this.totalChunks=Math.ceil(e.size/this.chunkSize),console.log(`ðŸš€ SDK Upload manager initialized: ${this.totalChunks} chunks, ${p.CONCURRENCY} concurrency, ${(this.chunkSize/1024/1024).toFixed(1)}MB chunk size`)}async upload(e){const t=c();this.uploadId=t,this.startTime=Date.now(),e(0,"uploading");for(let e=0;e<this.totalChunks;e++)this.chunkBytesUploaded.set(e,0);for(let e=0;e<this.totalChunks;e++)this.uploadQueue.push({index:e,uploadId:t,retries:0,maxRetries:3});const s=[];for(let t=0;t<p.CONCURRENCY;t++)s.push(this.uploadWorker(e));if(await Promise.all(s),this.failedChunks.size>0)throw e(0,"failed"),new Error(`Failed to upload ${this.failedChunks.size} chunks after retries`);return console.log(`âœ… SDK Upload completed in ${((Date.now()-this.startTime)/1e3).toFixed(1)}s`),{uploadId:t,totalChunks:this.totalChunks}}async uploadWorker(e){for(;this.uploadQueue.length>0||this.activeUploads.size>0;)if(this.uploadQueue.length>0&&this.activeUploads.size<p.CONCURRENCY){const t=this.uploadQueue.shift();if(t)try{await this.uploadChunk(t,e)}catch(e){this.handleChunkError(t,e)}}else await new Promise((e=>setTimeout(e,100)))}async uploadChunk(e,t){const{index:s,uploadId:i}=e,o=s*this.chunkSize,a=Math.min(o+this.chunkSize,this.file.size),n=this.file.slice(o,a),r=n.size;if(0===r)throw new Error(`Empty chunk detected for index ${s}`);this.activeUploads.set(s,{...e,startTime:Date.now()});const d=new FormData;d.append("chunk",n),d.append("uploadId",i),d.append("chunkIndex",s.toString()),d.append("totalChunks",this.totalChunks.toString());const l=Date.now(),u=this.config.baseUrl||"https://api1.videonest.co";return new Promise(((e,i)=>{const o=new XMLHttpRequest;o.timeout=12e4,o.upload.onprogress=e=>{if(e.lengthComputable){this.chunkBytesUploaded.set(s,e.loaded),this.totalBytesUploaded=Array.from(this.chunkBytesUploaded.values()).reduce(((e,t)=>e+t),0);const i=Date.now();if(i-this.lastProgressReport>100){const e=this.totalBytesUploaded/this.file.size*100;t(e,"uploading"),this.lastProgressReport=i}}},o.open("POST",`${u}/sdk/${this.config.channelId}/upload-chunk-v2`),o.setRequestHeader("Authorization",`Bearer ${this.config.apiKey}`),o.onload=()=>{if(o.status>=200&&o.status<300)try{const t=JSON.parse(o.responseText);if(t.success){const i=Date.now()-l;this.speedDetector.recordChunkUpload(r,i),this.activeUploads.delete(s),this.completedChunks.add(s),this.chunkBytesUploaded.set(s,r),e(t)}else i(new Error(t.message||"Chunk upload failed"))}catch(e){i(new Error("Invalid response from server"))}else i(new Error(`HTTP error: ${o.status}`))},o.onerror=()=>i(new Error("Network error during upload")),o.ontimeout=()=>i(new Error("Upload timeout - chunk may be too large")),o.send(d)}))}handleChunkError(e,t){console.error(`Chunk ${e.index} upload failed:`,t.message),e.retries<e.maxRetries?(e.retries++,setTimeout((()=>{this.uploadQueue.unshift(e)}),1e3*Math.pow(2,e.retries))):(this.failedChunks.add(e.index),this.activeUploads.delete(e.index))}getUploadStats(){return{totalChunks:this.totalChunks,completedChunks:this.completedChunks.size,failedChunks:this.failedChunks.size,activeUploads:this.activeUploads.size,chunkSize:this.chunkSize,totalSize:this.file.size,averageSpeed:this.speedDetector.avgSpeed}}getTotalChunks(){return this.totalChunks}}p.CONCURRENCY=6;class f{constructor(e){this.config=e,l("VideonestClient initialized with channelId:",e.channelId)}async uploadVideo(e,t){var s,i;u("Starting optimized video upload process"),u(`File: ${e.name}, size: ${e.size} bytes`);const o=c(),a=Date.now();try{const{metadata:i,onProgress:n=(e,t)=>{},thumbnail:r}=t;if(!r)throw u("Error: Thumbnail is required"),n(0,"failed"),await this.trackVideoUpload("failed",{sessionId:o,startTime:a,status:"failed",filename:e.name,fileSize:e.size,chunksCount:0}),new Error("Thumbnail is required for video upload");u("Upload options:",{metadata:i,hasThumbnail:!!r});const d={...i,channelId:this.config.channelId};u("Upload metadata:",d);const l=new p(e,d,this.config),c=l.getTotalChunks();await this.trackVideoUpload("start",{sessionId:o,startTime:a,userId:"sdk-user",filename:e.name,fileSize:e.size,chunksCount:c,status:"in_progress"});const{uploadId:h,totalChunks:f}=await l.upload(n);n(100,"finalizing"),u(`All chunks uploaded. Finalizing upload... (uploadId: ${h}, totalChunks: ${f})`);const m={fileName:e.name,uploadId:h,totalChunks:f.toString(),title:d.title||"Untitled Video",description:d.description||"",tags:d.tags?Array.isArray(d.tags)?d.tags.join(","):d.tags:""};u("Finalize request data:",m);const g=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/finalize-v2`,{method:"POST",body:JSON.stringify(m),headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`}});u(`Finalize response status: ${g.status}`);const k=await g.json();if(u("Finalize response data:",k),!k.success)throw u(`Finalization failed: ${k.message}`),n(100,"failed"),await this.trackVideoUpload("failed",{sessionId:o,startTime:a,status:"failed",filename:e.name,fileSize:e.size,chunksCount:f,videoId:(null===(s=k.video)||void 0===s?void 0:s.id)||0}),new Error(k.message||"Upload finalization failed");return u("Upload successfully finalized"),await this.trackVideoUpload("complete",{sessionId:o,startTime:a,status:"complete",filename:e.name,fileSize:e.size,chunksCount:f,videoId:k.video.id}),u("Uploading user-provided thumbnail"),await this.uploadThumbnail(r,k.video.id),u("Upload process completed successfully"),k}catch(s){return u(`Upload error: ${s instanceof Error?s.message:"Unknown error"}`,s),null===(i=t.onProgress)||void 0===i||i.call(t,0,"failed"),await this.trackVideoUpload("failed",{sessionId:o,startTime:a,status:"failed",filename:e.name,fileSize:e.size}),{success:!1,message:s instanceof Error?s.message:"An unexpected error occurred during upload"}}}async trackVideoUpload(e,t){l("Tracking video upload:",e,t);try{let s,i="",o="POST";const a="https://api1.videonest.co";if("start"===e)i="/video-stats/upload-sessions",o="POST",s={session_id:t.sessionId,user_id:t.userId,video_id:t.videoId||0,filename:t.filename,file_size:t.fileSize,chunks_count:t.chunksCount||0,status:"in_progress"};else if(("complete"===e||"failed"===e)&&(i=`/video-stats/upload-sessions/${t.sessionId}`,o="POST",s={video_id:t.videoId,end_time:(new Date).toISOString(),status:t.status},t.startTime)){const e=Date.now()-t.startTime;if(s.total_duration=`${Math.floor(e/1e3)} seconds`,t.fileSize&&e>0){const i=8*t.fileSize/(e/1e3);s.avg_speed_mbps=parseFloat((i/1e6).toFixed(2))}}const n=`${a}${i}`,r={"Content-Type":"application/json"},d=await fetch(n,{method:o,headers:r,body:JSON.stringify(s)});if(!d.ok){const e=await d.json().catch((()=>({})));return l("Failed to track upload session:",e),{success:!1,error:"Failed to track upload session"}}return{success:!0,...await d.json()}}catch(e){return l("Error tracking upload session:",e instanceof Error?e.message:String(e)),{success:!1,error:e instanceof Error?e.message:"Failed to track upload session"}}}async uploadThumbnail(e,t){const s=new FormData;s.append("thumbnail",e);try{const e=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${t}/send-thumbnail`,{method:"POST",body:s,headers:{Authorization:`Bearer ${this.config.apiKey}`}}),i=await e.json();if(!i.success)throw new Error(i.message||"Thumbnail upload failed");return i}catch(e){throw new Error(e instanceof Error?e.message:"Failed to upload thumbnail")}}async getVideoStatus(e){try{const t=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${e}/status`,{method:"GET",headers:{Authorization:`Bearer ${this.config.apiKey}`}}),s=await t.json();if(!s.success)throw new Error(s.message||"Failed to get video status");return s}catch(e){throw new Error(e instanceof Error?e.message:"Failed to get video status")}}async listVideos(){try{const e=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`,{method:"GET",headers:{Authorization:`Bearer ${this.config.apiKey}`}});l(`Videos list response status: ${e.status}`);const t=await e.json();return l("Videos list response data:",t),t.success?(l(`Successfully retrieved ${t.videos?t.videos.length:0} videos`),t):(l(`Videos list fetch failed: ${t.message||"Unknown error"}`),{success:!1,message:t.message||"Failed to retrieve videos"})}catch(e){return l(`Videos list error: ${e instanceof Error?e.message:"Unknown error"}`,e),{success:!1,message:e instanceof Error?e.message:"Failed to retrieve videos"}}}}e.VideonestEmbed=({videoId:e,config:t,style:s={}})=>{const{primaryColor:i,secondaryColor:o,darkMode:a,width:r,height:d,showTitle:l,showDescription:u}=s;let c=`https://app.videonest.co/embed/single/${e}`;const h=[];return i&&h.push(`primary_color=${i.replace("#","")}`),o&&h.push(`secondary_color=${o.replace("#","")}`),a&&h.push("dark_mode=true"),l&&h.push("show_title=true"),u&&h.push("show_description=true"),h.push(`channel_id=${t.channelId}`),h.push(`api_key=${t.apiKey}`),h.length>0&&(c+=`?${h.join("&")}`),n.createElement("iframe",{src:c,style:{width:r||"100%",height:d||"100%"},frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:`Videonest video ${e}`})},e.getVideoStatus=async function(e,t){return new f(t).getVideoStatus(e)},e.isDebugModeEnabled=function(){return r},e.listVideos=async function(e){return new f(e).listVideos()},e.setDebugMode=function(e){r=e,e?(a.default.enable("videonest-sdk"),"undefined"!=typeof window&&window.localStorage.setItem("debug","videonest-sdk")):(a.default.disable(),"undefined"!=typeof window&&window.localStorage.removeItem("debug"))},e.uploadVideo=async function(e,t,s){return new f(s).uploadVideo(e,t)},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=videonest-sdk.umd.js.map
