!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("debug"),require("react")):"function"==typeof define&&define.amd?define(["exports","debug","react"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).VideonestSDK={},e.debugModule,e.React)}(this,(function(e,t,s){"use strict";function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(s){if("default"!==s){var o=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,o.get?o:{enumerable:!0,get:function(){return e[s]}})}})),t.default=e,Object.freeze(t)}var n=o(t),a=i(s);let r=!1;const d=n.default("videonest-sdk");const c=function(e,...t){r&&d(e,...t)};function l(e,...t){r&&(console.log(`[videonest-sdk] ${e}`,...t),d(e,...t))}class u{constructor(){this.samples=[],this.avgSpeed=null,this.globalThroughput=0}recordChunkUpload(e,t){const s=8*e/(t/1e3)/1e6;return this.samples.push(s),this.samples.length>5&&this.samples.shift(),this.avgSpeed=this.calculateWeightedAverage(this.samples),this.globalThroughput=this.samples.reduce(((e,t)=>e+t),0),this.avgSpeed}calculateWeightedAverage(e){if(0===e.length)return 0;let t=0,s=0;return e.forEach(((e,o)=>{const i=o+1;t+=e*i,s+=i})),t/s}shouldReduceConcurrency(){return null!==this.avgSpeed&&(this.avgSpeed<5||this.globalThroughput<10)}shouldIncreaseConcurrency(){return null!==this.avgSpeed&&this.avgSpeed>20&&this.globalThroughput>50&&this.samples.length>=3}}class h{constructor(e,t,s){this.uploadQueue=[],this.activeUploads=new Map,this.completedChunks=new Set,this.failedChunks=new Set,this.speedDetector=new u,this.uploadId="",this.chunkBytesUploaded=new Map,this.totalBytesUploaded=0,this.startTime=0,this.lastProgressReport=0,this.stalledChunks=new Set,this.file=e,this.metadata=t,this.config=s,this.maxConcurrency=10,this.currentConcurrency=4,this.chunkSize=function(e,t=null){let s;return s=e<52428800?8388608:e<524288e3?26214400:e<2147483648?52428800:104857600,t&&(t>50?s=Math.min(2*s,209715200):t>25?s=Math.min(1.5*s,104857600):t>10||t<5&&(s=Math.max(.5*s,1048576))),Math.floor(s)}(e.size,null,1),this.totalChunks=Math.ceil(e.size/this.chunkSize),console.log(`üöÄ SDK Upload manager initialized: ${this.totalChunks} chunks, ${this.maxConcurrency} max concurrency, ${(this.chunkSize/1024/1024).toFixed(1)}MB chunk size`)}async upload(e){const t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}));this.uploadId=t,this.startTime=Date.now();for(let e=0;e<this.totalChunks;e++)this.chunkBytesUploaded.set(e,0);for(let e=0;e<this.totalChunks;e++)this.uploadQueue.push({index:e,uploadId:t,retries:0,maxRetries:3,priority:this.calculateChunkPriority(e)});this.uploadQueue.sort(((e,t)=>t.priority-e.priority));const s=[];for(let t=0;t<this.currentConcurrency;t++)s.push(this.uploadWorker(e));if(this.stallMonitor=setInterval((()=>this.checkForStalledUploads()),1e4),await Promise.all(s),this.stallMonitor&&clearInterval(this.stallMonitor),this.failedChunks.size>0)throw new Error(`Failed to upload ${this.failedChunks.size} chunks after retries`);return console.log(`‚úÖ SDK Upload completed in ${((Date.now()-this.startTime)/1e3).toFixed(1)}s`),{uploadId:t,totalChunks:this.totalChunks}}calculateChunkPriority(e){return 0===e?100:e===this.totalChunks-1?90:50}async uploadWorker(e){for(;this.uploadQueue.length>0||this.activeUploads.size>0;)if(this.uploadQueue.length>0&&this.activeUploads.size<this.currentConcurrency){const t=this.uploadQueue.shift();if(t)try{await this.uploadChunk(t,e)}catch(e){this.handleChunkError(t,e)}}else await new Promise((e=>setTimeout(e,100)))}async uploadChunk(e,t){const{index:s,uploadId:o}=e,i=s*this.chunkSize,n=Math.min(i+this.chunkSize,this.file.size),a=this.file.slice(i,n),r=a.size;if(0===r)throw new Error(`Empty chunk detected for index ${s}`);this.activeUploads.set(s,{...e,startTime:Date.now()});const d=new FormData;if(d.append("chunk",a),d.append("uploadId",o),d.append("chunkIndex",s.toString()),d.append("totalChunks",this.totalChunks.toString()),d.append("fileName",this.file.name),d.append("fileSize",this.file.size.toString()),d.append("totalConcurrentVideos","1"),0===s&&(d.append("channelId",this.metadata.channelId.toString()),this.metadata.title&&d.append("title",this.metadata.title),this.metadata.description&&d.append("description",this.metadata.description),this.metadata.tags)){const e=Array.isArray(this.metadata.tags)?this.metadata.tags.join(","):this.metadata.tags;e&&e.length>0&&d.append("tags",e)}const c=Date.now(),l=this.config.baseUrl||"https://api1.videonest.co";return new Promise(((e,o)=>{const i=new XMLHttpRequest;i.timeout=12e4,i.upload.onprogress=e=>{if(e.lengthComputable){this.chunkBytesUploaded.set(s,e.loaded),this.totalBytesUploaded=Array.from(this.chunkBytesUploaded.values()).reduce(((e,t)=>e+t),0);const o=Date.now();if(o-this.lastProgressReport>100){const e=this.totalBytesUploaded/this.file.size*100;t(e),this.lastProgressReport=o}}},i.open("POST",`${l}/sdk/${this.config.channelId}/upload-chunk-v2`),i.setRequestHeader("Authorization",`Bearer ${this.config.apiKey}`),i.onload=()=>{if(i.status>=200&&i.status<300)try{const t=JSON.parse(i.responseText);if(t.success){const o=Date.now()-c,i=this.speedDetector.recordChunkUpload(r,o);this.activeUploads.delete(s),this.completedChunks.add(s),this.chunkBytesUploaded.set(s,r),this.completedChunks.size%3==0&&this.adjustConcurrency(i),e(t)}else o(new Error(t.message||"Chunk upload failed"))}catch(e){o(new Error("Invalid response from server"))}else o(new Error(`HTTP error: ${i.status}`))},i.onerror=()=>o(new Error("Network error during upload")),i.ontimeout=()=>o(new Error("Upload timeout - chunk may be too large")),i.send(d)}))}handleChunkError(e,t){console.error(`Chunk ${e.index} upload failed:`,t.message),e.retries<e.maxRetries?(e.retries++,setTimeout((()=>{this.uploadQueue.unshift(e)}),1e3*Math.pow(2,e.retries))):(this.failedChunks.add(e.index),this.activeUploads.delete(e.index))}adjustConcurrency(e){const t=this.currentConcurrency;if(this.speedDetector.shouldReduceConcurrency()?(this.currentConcurrency=Math.max(1,this.currentConcurrency-1),console.log(`üêå SDK: Reducing concurrency to ${this.currentConcurrency} (${e.toFixed(1)} Mbps)`)):this.speedDetector.shouldIncreaseConcurrency()&&this.currentConcurrency<this.maxConcurrency&&(e>50?(this.currentConcurrency=Math.min(this.currentConcurrency+2,this.maxConcurrency),console.log(`üöÄ SDK: Boosting concurrency to ${this.currentConcurrency} (${e.toFixed(1)} Mbps)`)):e>25&&(this.currentConcurrency=Math.min(this.currentConcurrency+1,this.maxConcurrency),console.log(`‚ö° SDK: Increasing concurrency to ${this.currentConcurrency} (${e.toFixed(1)} Mbps)`))),this.currentConcurrency>t&&this.uploadQueue.length>0){const e=this.currentConcurrency-t;for(let t=0;t<e;t++)this.uploadWorker((()=>{}))}}checkForStalledUploads(){const e=Date.now();for(const[t,s]of this.activeUploads.entries())e-s.startTime>3e4&&(console.warn(`‚ö†Ô∏è SDK: Chunk ${t} appears stalled, will retry`),this.stalledChunks.add(t),this.activeUploads.delete(t),this.uploadQueue.unshift({...s,retries:s.retries+1}))}getUploadStats(){return{totalChunks:this.totalChunks,completedChunks:this.completedChunks.size,failedChunks:this.failedChunks.size,activeUploads:this.activeUploads.size,currentConcurrency:this.currentConcurrency,avgSpeed:this.speedDetector.avgSpeed,progress:this.totalBytesUploaded/this.file.size*100}}}class p{constructor(e){this.config=e,c("VideonestClient initialized with channelId:",e.channelId)}async uploadVideo(e,t){l("Starting optimized video upload process"),l(`File: ${e.name}, size: ${e.size} bytes`);try{const{metadata:s,onProgress:o=()=>{},thumbnail:i}=t;if(!i)throw l("Error: Thumbnail is required"),new Error("Thumbnail is required for video upload");l("Upload options:",{metadata:s,hasThumbnail:!!i});const n={...s,channelId:this.config.channelId};l("Upload metadata:",n);const a=new h(e,n,this.config),{uploadId:r,totalChunks:d}=await a.upload(o);l(`All chunks uploaded. Finalizing upload... (uploadId: ${r}, totalChunks: ${d})`);const c={fileName:e.name,uploadId:r,totalChunks:d.toString(),title:n.title||"Untitled Video",description:n.description||"",tags:n.tags?Array.isArray(n.tags)?n.tags.join(","):n.tags:""};l("Finalize request data:",c);const u=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/finalize-v2`,{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`}});l(`Finalize response status: ${u.status}`);const p=await u.json();if(l("Finalize response data:",p),!p.success)throw l(`Finalization failed: ${p.message}`),new Error(p.message||"Upload finalization failed");return l("Upload successfully finalized"),l("Uploading user-provided thumbnail"),await this.uploadThumbnail(i,p.video.id),l("Upload process completed successfully"),p}catch(e){return l(`Upload error: ${e instanceof Error?e.message:"Unknown error"}`,e),{success:!1,message:e instanceof Error?e.message:"An unexpected error occurred during upload"}}}async trackVideoUpload(e,t){c("Tracking video upload:",e,t);try{let s,o="",i="POST";const n="https://api1.videonest.co";if("start"===e)o="/video-stats/upload-sessions",i="POST",s={session_id:t.sessionId,user_id:t.userId,video_id:t.videoId||0,filename:t.filename,file_size:t.fileSize,chunks_count:t.chunksCount||0,status:"in_progress"};else if(("complete"===e||"failed"===e)&&(o=`/video-stats/upload-sessions/${t.sessionId}`,i="POST",s={video_id:t.videoId,end_time:(new Date).toISOString(),status:t.status},t.startTime)){const e=Date.now()-t.startTime;if(s.total_duration=`${Math.floor(e/1e3)} seconds`,t.fileSize&&e>0){const o=8*t.fileSize/(e/1e3);s.avg_speed_mbps=parseFloat((o/1e6).toFixed(2))}}const a=`${n}${o}`;c("Upload session request:",{action:e,url:a,method:i,body:s});const r={"Content-Type":"application/json"};this.config.apiKey&&(r["X-API-Key"]=this.config.apiKey),this.config.channelId&&(r["X-Channel-ID"]=this.config.channelId.toString());const d=await fetch(a,{method:i,headers:r,body:JSON.stringify(s)});if(!d.ok){const e=await d.json().catch((()=>({})));return c("Failed to track upload session:",e),{success:!1,error:"Failed to track upload session"}}return{success:!0,...await d.json()}}catch(e){return c("Error tracking upload session:",e instanceof Error?e.message:String(e)),{success:!1,error:e instanceof Error?e.message:"Failed to track upload session"}}}async uploadThumbnail(e,t){const s=new FormData;s.append("thumbnail",e);try{const e=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${t}/send-thumbnail`,{method:"POST",body:s,headers:{Authorization:`Bearer ${this.config.apiKey}`}}),o=await e.json();if(!o.success)throw new Error(o.message||"Thumbnail upload failed");return o}catch(e){throw new Error(e instanceof Error?e.message:"Failed to upload thumbnail")}}async getVideoStatus(e){try{const t=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${e}/status`,{method:"GET",headers:{Authorization:`Bearer ${this.config.apiKey}`}}),s=await t.json();if(!s.success)throw new Error(s.message||"Failed to get video status");return s}catch(e){throw new Error(e instanceof Error?e.message:"Failed to get video status")}}async listVideos(){try{const e=await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`,{method:"GET",headers:{Authorization:`Bearer ${this.config.apiKey}`}});c(`Videos list response status: ${e.status}`);const t=await e.json();return c("Videos list response data:",t),t.success?(c(`Successfully retrieved ${t.videos?t.videos.length:0} videos`),t):(c(`Videos list fetch failed: ${t.message||"Unknown error"}`),{success:!1,message:t.message||"Failed to retrieve videos"})}catch(e){return c(`Videos list error: ${e instanceof Error?e.message:"Unknown error"}`,e),{success:!1,message:e instanceof Error?e.message:"Failed to retrieve videos"}}}}e.VideonestEmbed=({videoId:e,config:t,style:s={}})=>{const{primaryColor:o,secondaryColor:i,darkMode:n,width:r,height:d,showTitle:c,showDescription:l}=s;let u=`https://app.videonest.co/embed/single/${e}`;const h=[];return o&&h.push(`primary_color=${o.replace("#","")}`),i&&h.push(`secondary_color=${i.replace("#","")}`),n&&h.push("dark_mode=true"),c&&h.push("show_title=true"),l&&h.push("show_description=true"),h.push(`channel_id=${t.channelId}`),h.push(`api_key=${t.apiKey}`),h.length>0&&(u+=`?${h.join("&")}`),a.createElement("iframe",{src:u,style:{width:r||"100%",height:d||"100%"},frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:`Videonest video ${e}`})},e.getVideoStatus=async function(e,t){return new p(t).getVideoStatus(e)},e.isDebugModeEnabled=function(){return r},e.listVideos=async function(e){return new p(e).listVideos()},e.setDebugMode=function(e){r=e,e?(n.default.enable("videonest-sdk"),"undefined"!=typeof window&&window.localStorage.setItem("debug","videonest-sdk"),console.log("[videonest-sdk] Debug mode enabled")):(n.default.disable(),"undefined"!=typeof window&&window.localStorage.removeItem("debug"))},e.uploadVideo=async function(e,t,s){return new p(s).uploadVideo(e,t)},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=videonest-sdk.umd.js.map
