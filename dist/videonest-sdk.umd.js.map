{"version":3,"file":"videonest-sdk.umd.js","sources":["../src/utils/debug.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n    \n    console.log('[videonest-sdk] Debug mode enabled');\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog('Starting video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n    \n    try {\n      const { \n        metadata, \n        chunkSize = 2 * 1024 * 1024, \n        onProgress = () => {}, \n        thumbnail\n      } = options;\n      \n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        throw new Error('Thumbnail is required for video upload');\n      }\n      \n      forceLog('Upload options:', { \n        metadata, \n        chunkSize, \n        hasThumbnail: !!thumbnail\n      });\n      \n      // Generate UUID for this upload\n      const uploadId = this.generateUUID();\n      const totalChunks = Math.ceil(file.size / chunkSize);\n      forceLog(`Generated uploadId: ${uploadId}, total chunks: ${totalChunks}`);\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {\n        ...metadata,\n        channelId: this.config.channelId,\n      };\n      forceLog('Upload metadata:', uploadMetadata);\n      \n      // Upload file in chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n        \n        const formData = new FormData();\n        formData.append('chunk', chunk);\n        formData.append('uploadId', uploadId);\n        formData.append('chunkIndex', chunkIndex.toString());\n        formData.append('totalChunks', totalChunks.toString());\n        formData.append('fileName', file.name);\n        formData.append('fileSize', file.size.toString());\n\n        // Add metadata to the first chunk\n        if (chunkIndex === 0 && uploadMetadata) {\n          formData.append('channelId', uploadMetadata.channelId.toString());\n          if (uploadMetadata.title) formData.append('title', uploadMetadata.title);\n          if (uploadMetadata.description) formData.append('description', uploadMetadata.description);\n          \n          if (uploadMetadata.tags) {\n            // Handle tags that could be either string or array\n            const tagsValue = Array.isArray(uploadMetadata.tags) \n              ? uploadMetadata.tags.join(',') \n              : uploadMetadata.tags;\n              \n            if (tagsValue && tagsValue.length > 0) {\n              formData.append('tags', tagsValue);\n            }\n          }\n        }\n        \n        // Send the chunk\n        forceLog(`Uploading chunk ${chunkIndex + 1}/${totalChunks} (${start}-${end} bytes)`);\n        const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/upload-chunk`, {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Authorization': `Bearer ${this.config.apiKey}`\n          },\n        });\n        \n        forceLog(`Chunk ${chunkIndex + 1} response status: ${response.status}`);\n        const result = await response.json();\n        forceLog(`Chunk ${chunkIndex + 1} upload result:`, result);\n        \n        if (!result.success) {\n          forceLog(`Chunk ${chunkIndex + 1} upload failed: ${result.message}`);\n          throw new Error(result.message || 'Chunk upload failed');\n        }\n        \n        // Update progress\n        const progress = ((chunkIndex + 1) / totalChunks) * 100;\n        forceLog(`Upload progress: ${progress.toFixed(2)}%`);\n        onProgress(progress);\n      }\n      \n      // Finalize the upload\n      forceLog('All chunks uploaded. Finalizing upload...');\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString() \n      };\n      forceLog('Finalize request data:', finalData);\n      \n      const finalizeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/finalize`, {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      forceLog(`Finalize response status: ${finalizeResponse.status}`);\n      const finalizeResult = await finalizeResponse.json();\n      forceLog('Finalize response data:', finalizeResult);\n      \n      if (!finalizeResult.success) {\n        forceLog(`Finalization failed: ${finalizeResult.message}`);\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      forceLog('Upload successfully finalized');\n      \n      // Upload the provided thumbnail\n      forceLog('Uploading user-provided thumbnail');\n      await this.uploadThumbnail(thumbnail, finalizeResult.video.id);\n      forceLog('Upload process completed successfully');\n      return finalizeResult;\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n \n  private generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    log('Fetching videos for channel ID:', this.config.channelId);\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n      \n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n      \n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\n\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":["isDebugEnabled","debugInstance","debugModule","log","message","args","forceLog","console","VideonestClient","constructor","config","this","channelId","uploadVideo","file","options","name","size","metadata","chunkSize","onProgress","thumbnail","Error","hasThumbnail","uploadId","generateUUID","totalChunks","Math","ceil","uploadMetadata","chunkIndex","start","end","min","chunk","slice","formData","FormData","append","toString","title","description","tags","tagsValue","Array","isArray","join","length","response","fetch","method","body","headers","Authorization","apiKey","status","result","json","success","progress","toFixed","finalData","fileName","finalizeResponse","JSON","stringify","finalizeResult","uploadThumbnail","video","id","error","thumbnailFile","videoId","replace","c","r","random","getVideoStatus","listVideos","videos","style","primaryColor","secondaryColor","darkMode","width","height","showTitle","showDescription","embedUrl","params","push","React","createElement","src","frameBorder","allow","allowFullScreen","async","enable","window","localStorage","setItem","disable","removeItem"],"mappings":"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"}