{"version":3,"file":"videonest-sdk.umd.js","sources":["../src/utils/debug.ts","../src/utils/uploadOptimizationManager.ts","../src/utils/helpers.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n    \n    console.log('[videonest-sdk] Debug mode enabled');\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","// uploadOptimizationManager.ts - SDK v2 Upgrade\nimport { generateUUID } from './helpers'\nimport { VideonestConfig, VideoMetadata } from '../types'\n\nexport function calculateOptimalChunkSize(fileSize: number): number {\n  let baseChunkSize: number;\n  if (fileSize < 50 * 1024 * 1024) baseChunkSize = 8 * 1024 * 1024;        // < 50MB: 8MB\n  else if (fileSize < 500 * 1024 * 1024) baseChunkSize = 25 * 1024 * 1024; // < 500MB: 25MB\n  else if (fileSize < 2 * 1024 * 1024 * 1024) baseChunkSize = 50 * 1024 * 1024; // < 2GB: 50MB\n  else baseChunkSize = 100 * 1024 * 1024; // 100MB\n  return Math.floor(baseChunkSize);\n}\n\nexport class ConnectionSpeedDetector {\n  private samples: number[] = [];\n  public avgSpeed: number | null = null;\n  private globalThroughput: number = 0;\n  \n  recordChunkUpload(chunkSize: number, uploadTime: number): number {\n    const speedMbps = (chunkSize * 8) / (uploadTime / 1000) / 1_000_000;\n    this.samples.push(speedMbps);\n    if (this.samples.length > 5) this.samples.shift(); // Keep more samples for stability\n    \n    this.avgSpeed = this.calculateWeightedAverage(this.samples);\n    this.globalThroughput = this.samples.reduce((a, b) => a + b, 0);\n    return this.avgSpeed;\n  }\n  \n  private calculateWeightedAverage(samples: number[]): number {\n    if (samples.length === 0) return 0;\n    \n    let weightedSum = 0;\n    let totalWeight = 0;\n    \n    samples.forEach((speed, index) => {\n      const weight = index + 1; // More recent samples get higher weight\n      weightedSum += speed * weight;\n      totalWeight += weight;\n    });\n    \n    return weightedSum / totalWeight;\n  }\n}\n\nexport class UploadOptimizationManager {\n  private file: File;\n  private metadata: VideoMetadata;\n  private config: VideonestConfig;\n  private static readonly CONCURRENCY = 6; // Fixed concurrency\n  \n  private uploadQueue: Array<{\n    index: number;\n    uploadId: string;\n    retries: number;\n    maxRetries: number;\n    priority: number;\n  }> = [];\n  \n  private activeUploads = new Map();\n  private completedChunks = new Set<number>();\n  private failedChunks = new Set<number>();\n  private speedDetector = new ConnectionSpeedDetector();\n  \n  private chunkSize: number;\n  private totalChunks: number;\n  private uploadId: string = '';\n  \n  // Enhanced progress tracking\n  private chunkBytesUploaded = new Map<number, number>();\n  private totalBytesUploaded = 0;\n  private startTime: number = 0;\n  private lastProgressReport: number = 0;\n  private stalledChunks = new Set<number>();\n  private stallMonitor?: NodeJS.Timeout;\n  \n  constructor(file: File, metadata: VideoMetadata, config: VideonestConfig) {\n    this.file = file;\n    this.metadata = metadata;\n    this.config = config;\n    \n    this.chunkSize = calculateOptimalChunkSize(file.size);\n    this.totalChunks = Math.ceil(file.size / this.chunkSize);\n    \n    console.log(`🚀 SDK Upload manager initialized: ${this.totalChunks} chunks, ${UploadOptimizationManager.CONCURRENCY} concurrency, ${(this.chunkSize / 1024 / 1024).toFixed(1)}MB chunk size`);\n  }\n  \n  async upload(onProgress: (progress: number) => void): Promise<{ uploadId: string; totalChunks: number }> {\n    const uploadId = generateUUID();\n    this.uploadId = uploadId;\n    this.startTime = Date.now();\n    \n    // Initialize bytes tracking for each chunk\n    for (let i = 0; i < this.totalChunks; i++) this.chunkBytesUploaded.set(i, 0);\n    \n    // Create upload queue with priority (first and last chunks prioritized)\n    for (let i = 0; i < this.totalChunks; i++) {\n      this.uploadQueue.push({\n        index: i,\n        uploadId,\n        retries: 0,\n        maxRetries: 3,\n        priority: this.calculateChunkPriority(i)\n      });\n    }\n    \n    this.uploadQueue.sort((a, b) => b.priority - a.priority); // Sort queue by priority\n    \n    // Start workers with fixed concurrency\n    const workerPromises = [];\n    for (let i = 0; i < UploadOptimizationManager.CONCURRENCY; i++) {\n      workerPromises.push(this.uploadWorker(onProgress));\n    }\n    \n    this.stallMonitor = setInterval(() => this.checkForStalledUploads(), 10000); // Monitor for stalled uploads\n    \n    await Promise.all(workerPromises);\n    \n    if (this.stallMonitor) clearInterval(this.stallMonitor);\n    \n    if (this.failedChunks.size > 0) {\n      throw new Error(`Failed to upload ${this.failedChunks.size} chunks after retries`);\n    }\n    \n    console.log(`✅ SDK Upload completed in ${((Date.now() - this.startTime) / 1000).toFixed(1)}s`);\n    return { uploadId, totalChunks: this.totalChunks };\n  }\n  \n  private calculateChunkPriority(index: number): number {\n    if (index === 0) return 100; // First chunk gets highest priority (contains metadata)\n    if (index === this.totalChunks - 1) return 90; // Last chunk gets high priority (allows early finalization check)\n    return 50; // Middle chunks get normal priority\n  }\n  \n  private async uploadWorker(onProgress: (progress: number) => void): Promise<void> {\n    while (this.uploadQueue.length > 0 || this.activeUploads.size > 0) {\n      if (this.uploadQueue.length > 0 && this.activeUploads.size < UploadOptimizationManager.CONCURRENCY) {\n        const chunkInfo = this.uploadQueue.shift();\n        if (chunkInfo) {\n          try {\n            await this.uploadChunk(chunkInfo, onProgress);\n          } catch (error) {\n            this.handleChunkError(chunkInfo, error as Error);\n          }\n        }\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 100)); // Wait for active uploads to complete\n      }\n    }\n  }\n  \n  private async uploadChunk(chunkInfo: any, onProgress: (progress: number) => void): Promise<any> {\n    const { index, uploadId } = chunkInfo;\n    \n    const start = index * this.chunkSize;\n    const end = Math.min(start + this.chunkSize, this.file.size);\n    const chunk = this.file.slice(start, end);\n    const chunkSize = chunk.size;\n    \n    if (chunkSize === 0) throw new Error(`Empty chunk detected for index ${index}`);\n    \n    this.activeUploads.set(index, { ...chunkInfo, startTime: Date.now() });\n    \n    const formData = new FormData();\n    formData.append('chunk', chunk);\n    formData.append('uploadId', uploadId);\n    formData.append('chunkIndex', index.toString());\n    formData.append('totalChunks', this.totalChunks.toString());\n    formData.append('fileName', this.file.name);\n    formData.append('fileSize', this.file.size.toString());\n    formData.append('totalConcurrentVideos', '1'); // Always 1 for SDK\n    \n    // Add metadata to first chunk\n    if (index === 0) {\n      formData.append('channelId', this.metadata.channelId.toString());\n      if (this.metadata.title) formData.append('title', this.metadata.title);\n      if (this.metadata.description) formData.append('description', this.metadata.description);\n      \n      if (this.metadata.tags) {\n        const tagsValue = Array.isArray(this.metadata.tags) \n          ? this.metadata.tags.join(',') \n          : this.metadata.tags;\n          \n        if (tagsValue && tagsValue.length > 0) formData.append('tags', tagsValue);\n      }\n    }\n    \n    const startTime = Date.now();\n    const baseUrl = this.config.baseUrl || 'https://api1.videonest.co';\n    \n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.timeout = 120000; // 2 minutes - Increased timeout for larger chunks\n      \n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          this.chunkBytesUploaded.set(index, event.loaded);\n          this.totalBytesUploaded = Array.from(this.chunkBytesUploaded.values())\n            .reduce((sum, bytes) => sum + bytes, 0);\n          \n          const now = Date.now();\n          if (now - this.lastProgressReport > 100) { // Throttle progress updates\n            const progressPercentage = (this.totalBytesUploaded / this.file.size) * 100;\n            onProgress(progressPercentage);\n            this.lastProgressReport = now;\n          }\n        }\n      };\n      \n      xhr.open('POST', `${baseUrl}/sdk/${this.config.channelId}/upload-chunk-v2`); // Use v2 route like frontend\n      xhr.setRequestHeader('Authorization', `Bearer ${this.config.apiKey}`);\n      \n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const result = JSON.parse(xhr.responseText);\n            if (!result.success) {\n              reject(new Error(result.message || 'Chunk upload failed'));\n            } else {\n              const uploadTime = Date.now() - startTime;\n              const currentSpeed = this.speedDetector.recordChunkUpload(chunkSize, uploadTime);\n              \n              this.activeUploads.delete(index);\n              this.completedChunks.add(index);\n              this.chunkBytesUploaded.set(index, chunkSize);\n              \n              resolve(result);\n            }\n          } catch (e) {\n            reject(new Error('Invalid response from server'));\n          }\n        } else {\n          reject(new Error(`HTTP error: ${xhr.status}`));\n        }\n      };\n      \n      xhr.onerror = () => reject(new Error('Network error during upload'));\n      xhr.ontimeout = () => reject(new Error('Upload timeout - chunk may be too large'));\n      \n      xhr.send(formData);\n    });\n  }\n  \n  private handleChunkError(chunkInfo: any, error: Error): void {\n    console.error(`Chunk ${chunkInfo.index} upload failed:`, error.message);\n    \n    if (chunkInfo.retries < chunkInfo.maxRetries) {\n      chunkInfo.retries++;\n      setTimeout(() => {\n        this.uploadQueue.unshift(chunkInfo); // Add to front for priority\n      }, Math.pow(2, chunkInfo.retries) * 1000); // Add delay before retry with exponential backoff\n    } else {\n      this.failedChunks.add(chunkInfo.index);\n      this.activeUploads.delete(chunkInfo.index);\n    }\n  }\n\n  private checkForStalledUploads(): void {\n    const now = Date.now();\n    const stallThreshold = 30000; // 30 seconds\n    \n    for (const [index, uploadInfo] of this.activeUploads.entries()) {\n      if (now - uploadInfo.startTime > stallThreshold) {\n        console.warn(`⚠️ SDK: Chunk ${index} appears stalled, will retry`);\n        this.stalledChunks.add(index);\n        \n        this.activeUploads.delete(index); // Cancel and retry stalled upload\n        this.uploadQueue.unshift({\n          ...uploadInfo,\n          retries: uploadInfo.retries + 1\n        });\n      }\n    }\n  }\n  \n  getUploadStats() {\n    return {\n      totalChunks: this.totalChunks,\n      completedChunks: this.completedChunks.size,\n      failedChunks: this.failedChunks.size,\n      activeUploads: this.activeUploads.size,\n      concurrency: UploadOptimizationManager.CONCURRENCY,\n      avgSpeed: this.speedDetector.avgSpeed,\n      progress: (this.totalBytesUploaded / this.file.size) * 100\n    };\n  }\n}"," \nexport function generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\nimport { generateUUID } from '../utils/helpers';\nimport { UploadOptimizationManager } from '../utils/uploadOptimizationManager';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog('Starting optimized video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n    \n    try {\n      const { \n        metadata, \n        onProgress = () => {}, \n        thumbnail\n      } = options;\n      \n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        throw new Error('Thumbnail is required for video upload');\n      }\n      \n      forceLog('Upload options:', { \n        metadata, \n        hasThumbnail: !!thumbnail\n      });\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {...metadata, channelId: this.config.channelId};\n      forceLog('Upload metadata:', uploadMetadata);\n      \n      // Create upload optimization manager\n      const uploadManager = new UploadOptimizationManager(\n        file, \n        uploadMetadata, \n        this.config\n      );\n      \n      // Upload chunks with optimization\n      const { uploadId, totalChunks } = await uploadManager.upload(onProgress);\n      \n      forceLog(`All chunks uploaded. Finalizing upload... (uploadId: ${uploadId}, totalChunks: ${totalChunks})`);\n      \n      // Finalize using v2 route with metadata in request body\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString(),\n        // Include metadata in finalization request (like frontend v2)\n        title: uploadMetadata.title || 'Untitled Video',\n        description: uploadMetadata.description || '',\n        tags: uploadMetadata.tags ? (Array.isArray(uploadMetadata.tags) ? uploadMetadata.tags.join(',') : uploadMetadata.tags) : ''\n      };\n      forceLog('Finalize request data:', finalData);\n      \n      // Use new SDK v2 finalize route\n      const finalizeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/finalize-v2`, {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      forceLog(`Finalize response status: ${finalizeResponse.status}`);\n      const finalizeResult = await finalizeResponse.json();\n      forceLog('Finalize response data:', finalizeResult);\n      \n      if (!finalizeResult.success) {\n        forceLog(`Finalization failed: ${finalizeResult.message}`);\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      forceLog('Upload successfully finalized');\n      \n      // Upload the provided thumbnail\n      forceLog('Uploading user-provided thumbnail');\n      await this.uploadThumbnail(thumbnail, finalizeResult.video.id);\n      forceLog('Upload process completed successfully');\n      \n      return finalizeResult;\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      \n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n  private async trackVideoUpload(action: string, sessionData: any) {\n    log(\"Tracking video upload:\", action, sessionData);\n    \n    try {\n      let endpoint = '';\n      let method = 'POST';\n      let requestBody: any;\n      const baseUrl = 'https://api1.videonest.co';\n  \n      if (action === 'start') {\n        // CREATE new session\n        endpoint = '/video-stats/upload-sessions';\n        method = 'POST';\n        requestBody = {\n          session_id: sessionData.sessionId,\n          user_id: sessionData.userId,\n          video_id: sessionData.videoId || 0, // Will be updated later\n          filename: sessionData.filename,\n          file_size: sessionData.fileSize,\n          chunks_count: sessionData.chunksCount || 0,\n          status: 'in_progress'\n          // start_time will default to NOW() in the API\n        };\n      } else if (action === 'complete' || action === 'failed') {\n        // UPDATE existing session\n        endpoint = `/video-stats/upload-sessions/${sessionData.sessionId}`;\n        method = 'POST'; // API uses POST for updates\n        requestBody = {\n          video_id: sessionData.videoId,\n          end_time: new Date().toISOString(),\n          status: sessionData.status\n        };\n        \n        if (sessionData.startTime) {\n          const duration = Date.now() - sessionData.startTime;\n          requestBody.total_duration = `${Math.floor(duration / 1000)} seconds`;\n          \n          // Calculate average speed in Mbps\n          if (sessionData.fileSize && duration > 0) {\n            const speedBps = (sessionData.fileSize * 8) / (duration / 1000); // bits per second\n            requestBody.avg_speed_mbps = parseFloat((speedBps / 1_000_000).toFixed(2)); // Convert to Mbps\n          }\n        }\n      }\n  \n      const url = `${baseUrl}${endpoint}`;\n      log(\"Upload session request:\", { action, url, method, body: requestBody });\n  \n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n\n      // Add authentication headers\n      if (this.config.apiKey) {\n        headers['X-API-Key'] = this.config.apiKey;\n      }\n\n      if (this.config.channelId) {\n        headers['X-Channel-ID'] = this.config.channelId.toString();\n      }\n  \n      const response = await fetch(url, {\n        method,\n        headers,\n        body: JSON.stringify(requestBody),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        log('Failed to track upload session:', errorData);\n        return { success: false, error: 'Failed to track upload session' };\n      }\n  \n      const data = await response.json();\n      return { success: true, ...data };\n    } catch (error) {\n      log('Error tracking upload session:', error instanceof Error ? error.message : String(error));\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to track upload session' };\n    }\n  }\n\n\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n\n\n\n\n\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n      \n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n      \n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n\n\n\n\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\n\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":["isDebugEnabled","debugInstance","debugModule","log","message","args","forceLog","console","ConnectionSpeedDetector","constructor","this","samples","avgSpeed","globalThroughput","recordChunkUpload","chunkSize","uploadTime","speedMbps","push","length","shift","calculateWeightedAverage","reduce","a","b","weightedSum","totalWeight","forEach","speed","index","weight","UploadOptimizationManager","file","metadata","config","uploadQueue","activeUploads","Map","completedChunks","Set","failedChunks","speedDetector","uploadId","chunkBytesUploaded","totalBytesUploaded","startTime","lastProgressReport","stalledChunks","fileSize","baseChunkSize","Math","floor","calculateOptimalChunkSize","size","totalChunks","ceil","CONCURRENCY","toFixed","upload","onProgress","replace","c","r","random","toString","Date","now","i","set","retries","maxRetries","priority","calculateChunkPriority","sort","workerPromises","uploadWorker","stallMonitor","setInterval","checkForStalledUploads","Promise","all","clearInterval","Error","chunkInfo","uploadChunk","error","handleChunkError","resolve","setTimeout","start","end","min","chunk","slice","formData","FormData","append","name","channelId","title","description","tags","tagsValue","Array","isArray","join","baseUrl","reject","xhr","XMLHttpRequest","timeout","onprogress","event","lengthComputable","loaded","from","values","sum","bytes","progressPercentage","open","setRequestHeader","apiKey","onload","status","result","JSON","parse","responseText","success","delete","add","e","onerror","ontimeout","send","unshift","pow","uploadInfo","entries","warn","getUploadStats","concurrency","progress","VideonestClient","uploadVideo","options","thumbnail","hasThumbnail","uploadMetadata","uploadManager","finalData","fileName","finalizeResponse","fetch","method","body","stringify","headers","Authorization","finalizeResult","json","uploadThumbnail","video","id","trackVideoUpload","action","sessionData","requestBody","endpoint","session_id","sessionId","user_id","userId","video_id","videoId","filename","file_size","chunks_count","chunksCount","end_time","toISOString","duration","total_duration","speedBps","avg_speed_mbps","parseFloat","url","response","ok","errorData","catch","String","thumbnailFile","getVideoStatus","listVideos","videos","style","primaryColor","secondaryColor","darkMode","width","height","showTitle","showDescription","embedUrl","params","React","createElement","src","frameBorder","allow","allowFullScreen","async","enable","window","localStorage","setItem","disable","removeItem"],"mappings":"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"}