{"version":3,"file":"videonest-sdk.umd.js","sources":["../src/utils/debug.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/components/VideonestPreview.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\nimport { generateUUID } from '../utils/helpers';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n\n  /**\n   * Upload video directly to S3 using presigned URLs\n   */\n  private async uploadVideoDirectToS3(\n    file: File,\n    presignedUrls: string[],\n    uploadId: string,\n    s3Key: string,\n    chunkSize: number,\n    onProgress: (progress: number) => void\n  ): Promise<{ success: boolean; uploadId: string; s3Key: string; parts: any[]; error?: string }> {\n    try {\n      const totalParts = presignedUrls.length;\n      const uploadedParts: any[] = [];\n\n      forceLog(`üöÄ Starting S3 upload: ${file.name} (${totalParts} parts)`);\n\n      // Track progress for each chunk\n      const chunkProgress = new Array(totalParts).fill(0);\n\n      const updateOverallProgress = () => {\n        const totalProgress = chunkProgress.reduce((sum, progress) => sum + progress, 0);\n        const overallProgress = totalProgress / totalParts;\n        onProgress(overallProgress);\n      };\n\n      // Upload each chunk to S3\n      const chunkPromises = presignedUrls.map(async (presignedUrl, index) => {\n        const start = index * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n\n        if (chunk.size === 0) {\n          throw new Error(`Empty chunk detected for part ${index + 1}`);\n        }\n\n        return new Promise<{ PartNumber: number; ETag: string }>((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = 300000; // 5 minutes timeout\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              chunkProgress[index] = (event.loaded / event.total) * 100;\n              updateOverallProgress();\n            }\n          };\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const etag = xhr.getResponseHeader('ETag');\n              if (!etag) {\n                reject(new Error(`No ETag received for part ${index + 1}`));\n                return;\n              }\n\n              chunkProgress[index] = 100;\n              updateOverallProgress();\n\n              resolve({\n                PartNumber: index + 1,\n                ETag: etag.replace(/\"/g, '') // Remove quotes from ETag\n              });\n            } else {\n              reject(new Error(`HTTP ${xhr.status}: Failed to upload part ${index + 1}`));\n            }\n          };\n\n          xhr.onerror = () => {\n            reject(new Error(`Network error uploading part ${index + 1}`));\n          };\n\n          xhr.ontimeout = () => {\n            reject(new Error(`Timeout uploading part ${index + 1}`));\n          };\n\n          xhr.open('PUT', presignedUrl);\n          xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n          xhr.send(chunk);\n        });\n      });\n\n      // Wait for all chunks to upload\n      const parts = await Promise.all(chunkPromises);\n\n      // Sort parts by part number to ensure correct order\n      const sortedParts = parts.sort((a, b) => a.PartNumber - b.PartNumber);\n\n      forceLog(`‚úÖ S3 upload completed: ${file.name} (${sortedParts.length} parts)`);\n\n      return {\n        success: true,\n        uploadId: uploadId,\n        s3Key: s3Key,\n        parts: sortedParts\n      };\n\n    } catch (error) {\n      forceLog(`‚ùå S3 upload failed for ${file.name}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Upload failed',\n        uploadId: uploadId,\n        s3Key: s3Key,\n        parts: []\n      };\n    }\n  }\n\n  /**\n   * Main video upload method\n   */\n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog('Starting direct S3 video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n\n    try {\n      const {\n        metadata,\n        onProgress = (_progress: number, _status: 'uploading' | 'finalizing' | 'failed' | 'stalled') => { },\n        thumbnail\n      } = options;\n\n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        onProgress(0, 'failed');\n        throw new Error('Thumbnail is required for video upload');\n      }\n\n      forceLog('Upload options:', {\n        metadata,\n        hasThumbnail: !!thumbnail\n      });\n\n      // Make sure channelId is included in metadata\n      const uploadMetadata = { ...metadata, channelId: this.config.channelId };\n      forceLog('Upload metadata:', uploadMetadata);\n\n      // Step 1: Generate presigned URLs using SDK endpoint\n      forceLog('üì° Generating presigned URLs via SDK endpoint...');\n      const presignedResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/generate-presigned-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileSize: file.size,\n          contentType: file.type,\n          metadata: uploadMetadata\n        })\n      });\n\n      if (!presignedResponse.ok) {\n        throw new Error(`Failed to generate presigned URLs: ${presignedResponse.status}`);\n      }\n\n      const presignedData = await presignedResponse.json();\n\n      if (!presignedData.success) {\n        throw new Error(presignedData.error || 'Failed to generate presigned URLs');\n      }\n\n      forceLog('‚úÖ Presigned URLs generated successfully');\n\n      // Step 2: Upload video directly to S3\n      forceLog('üì§ Starting direct S3 upload...');\n      onProgress(0, 'uploading');\n\n      const uploadResult = await this.uploadVideoDirectToS3(\n        file,\n        presignedData.presignedUrls,\n        presignedData.uploadId,\n        presignedData.s3Key,\n        presignedData.chunkSize,\n        (progress) => {\n          forceLog(`Upload progress: ${progress.toFixed(1)}%`);\n          onProgress(progress, 'uploading');\n        }\n      );\n\n      if (!uploadResult.success) {\n        throw new Error(uploadResult.error || 'S3 upload failed');\n      }\n\n      forceLog('‚úÖ S3 upload completed, starting finalization...');\n      onProgress(100, 'finalizing');\n\n      // Step 3: Complete upload using SDK endpoint\n      forceLog('üèÅ Completing upload via SDK endpoint...');\n      const completeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/complete-upload`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          uploadId: uploadResult.uploadId,\n          s3Key: uploadResult.s3Key,\n          parts: uploadResult.parts\n        })\n      });\n\n      if (!completeResponse.ok) {\n        throw new Error(`Failed to complete upload: ${completeResponse.status}`);\n      }\n\n      const completeData = await completeResponse.json();\n\n      if (!completeData.success) {\n        throw new Error(completeData.message || 'Upload completion failed');\n      }\n\n      forceLog('üéâ Video record created successfully:', completeData.data.videoId);\n\n      // Step 4: Upload thumbnail using SDK endpoint\n      forceLog('üñºÔ∏è Uploading user-provided thumbnail...');\n      await this.uploadThumbnail(thumbnail, completeData.data.videoId);\n      forceLog('‚úÖ Upload process completed successfully');\n\n      return {\n        success: true,\n        message: 'Video uploaded successfully',\n        video: {\n          id: completeData.data.videoId,\n        }\n      };\n\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload'\n      };\n    }\n  }\n\n  /**\n   * Upload thumbnail to the video\n   */\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n\n  /**\n   * Get video status\n   */\n  async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n  /**\n   * List all videos in the channel\n   */\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n\n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n\n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestPreviewProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestPreview: React.FC<VideonestPreviewProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/preview/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  // new version\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestPreview;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\nimport VideonestPreview from './components/VideonestPreview';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\nexport { VideonestPreview }; // Export the component\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\n// Minor\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":["isDebugEnabled","debugInstance","debugModule","log","message","args","forceLog","console","VideonestClient","constructor","config","this","channelId","uploadVideoDirectToS3","file","presignedUrls","uploadId","s3Key","chunkSize","onProgress","totalParts","length","name","chunkProgress","Array","fill","updateOverallProgress","totalProgress","reduce","sum","progress","chunkPromises","map","async","presignedUrl","index","start","end","Math","min","size","chunk","slice","Error","Promise","resolve","reject","xhr","XMLHttpRequest","timeout","upload","onprogress","event","lengthComputable","loaded","total","onload","status","etag","getResponseHeader","PartNumber","ETag","replace","onerror","ontimeout","open","setRequestHeader","send","sortedParts","all","sort","a","b","success","parts","error","uploadVideo","options","metadata","_progress","_status","thumbnail","hasThumbnail","uploadMetadata","presignedResponse","fetch","method","headers","Authorization","apiKey","body","JSON","stringify","fileName","fileSize","contentType","type","ok","presignedData","json","uploadResult","toFixed","completeResponse","completeData","data","videoId","uploadThumbnail","video","id","thumbnailFile","formData","FormData","append","response","result","getVideoStatus","listVideos","videos","style","primaryColor","secondaryColor","darkMode","width","height","showTitle","showDescription","embedUrl","params","push","join","React","createElement","src","frameBorder","allow","allowFullScreen","title","enable","window","localStorage","setItem","disable","removeItem"],"mappings":"yrBAIA,IAAIA,GAA0B,EAG9B,MAAMC,EAAgBC,EAAAA,QAAY,iBAuC3B,MAAMC,EAAM,SAASC,KAAoBC,GAC1CL,GACFC,EAAcG,KAAYC,EAE9B,WAMgBC,EAASF,KAAoBC,GACvCL,IACFO,QAAQJ,IAAI,mBAAmBC,OAAcC,GAC7CJ,EAAcG,KAAYC,GAE9B,CCzDc,MAAOG,EAGnB,WAAAC,CAAYC,GACVC,KAAKD,OAASA,EACdP,EAAI,8CAA+CO,EAAOE,UAC3D,CAKO,2BAAMC,CACZC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IACE,MAAMC,EAAaL,EAAcM,OAGjCf,EAAS,0BAA0BQ,EAAKQ,SAASF,YAGjD,MAAMG,EAAgB,IAAIC,MAAMJ,GAAYK,KAAK,GAE3CC,EAAwB,KAC5B,MAAMC,EAAgBJ,EAAcK,QAAO,CAACC,EAAKC,IAAaD,EAAMC,GAAU,GAE9EX,EADwBQ,EAAgBP,EACb,EAIvBW,EAAgBhB,EAAciB,KAAIC,MAAOC,EAAcC,KAC3D,MAAMC,EAAQD,EAAQjB,EAChBmB,EAAMC,KAAKC,IAAIH,EAAQlB,EAAWJ,EAAK0B,MACvCC,EAAQ3B,EAAK4B,MAAMN,EAAOC,GAEhC,GAAmB,IAAfI,EAAMD,KACR,MAAM,IAAIG,MAAM,iCAAiCR,EAAQ,KAG3D,OAAO,IAAIS,SAA8C,CAACC,EAASC,KACjE,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,QAAU,IAEdF,EAAIG,OAAOC,WAAcC,IACnBA,EAAMC,mBACR9B,EAAcY,GAAUiB,EAAME,OAASF,EAAMG,MAAS,IACtD7B,IACD,EAGHqB,EAAIS,OAAS,KACX,GAAIT,EAAIU,QAAU,KAAOV,EAAIU,OAAS,IAAK,CACzC,MAAMC,EAAOX,EAAIY,kBAAkB,QACnC,IAAKD,EAEH,YADAZ,EAAO,IAAIH,MAAM,6BAA6BR,EAAQ,MAIxDZ,EAAcY,GAAS,IACvBT,IAEAmB,EAAQ,CACNe,WAAYzB,EAAQ,EACpB0B,KAAMH,EAAKI,QAAQ,KAAM,KAE5B,MACChB,EAAO,IAAIH,MAAM,QAAQI,EAAIU,iCAAiCtB,EAAQ,KACvE,EAGHY,EAAIgB,QAAU,KACZjB,EAAO,IAAIH,MAAM,gCAAgCR,EAAQ,KAAK,EAGhEY,EAAIiB,UAAY,KACdlB,EAAO,IAAIH,MAAM,0BAA0BR,EAAQ,KAAK,EAG1DY,EAAIkB,KAAK,MAAO/B,GAChBa,EAAImB,iBAAiB,eAAgB,4BACrCnB,EAAIoB,KAAK1B,EAAM,GACf,IAOE2B,SAHcxB,QAAQyB,IAAItC,IAGNuC,MAAK,CAACC,EAAGC,IAAMD,EAAEX,WAAaY,EAAEZ,aAI1D,OAFAtD,EAAS,0BAA0BQ,EAAKQ,SAAS8C,EAAY/C,iBAEtD,CACLoD,SAAS,EACTzD,SAAUA,EACVC,MAAOA,EACPyD,MAAON,EAGV,CAAC,MAAOO,GAEP,OADArE,EAAS,0BAA0BQ,EAAKQ,QAASqD,GAC1C,CACLF,SAAS,EACTE,MAAOA,aAAiBhC,MAAQgC,EAAMvE,QAAU,gBAChDY,SAAUA,EACVC,MAAOA,EACPyD,MAAO,GAEV,CACF,CAKD,iBAAME,CAAY9D,EAAY+D,GAC5BvE,EAAS,2CACTA,EAAS,SAASQ,EAAKQ,eAAeR,EAAK0B,cAE3C,IACE,MAAMsC,SACJA,EAAQ3D,WACRA,EAAa,CAAC4D,EAAmBC,KAApB,EAAsFC,UACnGA,GACEJ,EAGJ,IAAKI,EAGH,MAFA3E,EAAS,gCACTa,EAAW,EAAG,UACR,IAAIwB,MAAM,0CAGlBrC,EAAS,kBAAmB,CAC1BwE,WACAI,eAAgBD,IAIlB,MAAME,EAAiB,IAAKL,EAAUlE,UAAWD,KAAKD,OAAOE,WAC7DN,EAAS,mBAAoB6E,GAG7B7E,EAAS,oDACT,MAAM8E,QAA0BC,MAAM,iCAAiC1E,KAAKD,OAAOE,mCAAoC,CACrH0E,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,UAAU7E,KAAKD,OAAO+E,UAEzCC,KAAMC,KAAKC,UAAU,CACnBC,SAAU/E,EAAKQ,KACfwE,SAAUhF,EAAK0B,KACfuD,YAAajF,EAAKkF,KAClBlB,SAAUK,MAId,IAAKC,EAAkBa,GACrB,MAAM,IAAItD,MAAM,sCAAsCyC,EAAkB3B,UAG1E,MAAMyC,QAAsBd,EAAkBe,OAE9C,IAAKD,EAAczB,QACjB,MAAM,IAAI9B,MAAMuD,EAAcvB,OAAS,qCAGzCrE,EAAS,2CAGTA,EAAS,mCACTa,EAAW,EAAG,aAEd,MAAMiF,QAAqBzF,KAAKE,sBAC9BC,EACAoF,EAAcnF,cACdmF,EAAclF,SACdkF,EAAcjF,MACdiF,EAAchF,WACbY,IACCxB,EAAS,oBAAoBwB,EAASuE,QAAQ,OAC9ClF,EAAWW,EAAU,YAAY,IAIrC,IAAKsE,EAAa3B,QAChB,MAAM,IAAI9B,MAAMyD,EAAazB,OAAS,oBAGxCrE,EAAS,mDACTa,EAAW,IAAK,cAGhBb,EAAS,4CACT,MAAMgG,QAAyBjB,MAAM,iCAAiC1E,KAAKD,OAAOE,4BAA6B,CAC7G0E,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,UAAU7E,KAAKD,OAAO+E,UAEzCC,KAAMC,KAAKC,UAAU,CACnB5E,SAAUoF,EAAapF,SACvBC,MAAOmF,EAAanF,MACpByD,MAAO0B,EAAa1B,UAIxB,IAAK4B,EAAiBL,GACpB,MAAM,IAAItD,MAAM,8BAA8B2D,EAAiB7C,UAGjE,MAAM8C,QAAqBD,EAAiBH,OAE5C,IAAKI,EAAa9B,QAChB,MAAM,IAAI9B,MAAM4D,EAAanG,SAAW,4BAU1C,OAPAE,EAAS,wCAAyCiG,EAAaC,KAAKC,SAGpEnG,EAAS,kDACHK,KAAK+F,gBAAgBzB,EAAWsB,EAAaC,KAAKC,SACxDnG,EAAS,2CAEF,CACLmE,SAAS,EACTrE,QAAS,8BACTuG,MAAO,CACLC,GAAIL,EAAaC,KAAKC,SAI3B,CAAC,MAAO9B,GAGP,OAFArE,EAAS,iBAAiBqE,aAAiBhC,MAAQgC,EAAMvE,QAAU,kBAAmBuE,GAE/E,CACLF,SAAS,EACTrE,QAASuE,aAAiBhC,MAAQgC,EAAMvE,QAAU,6CAErD,CACF,CAKO,qBAAMsG,CAAgBG,EAAqBJ,GACjD,MAAMK,EAAW,IAAIC,SACrBD,EAASE,OAAO,YAAaH,GAE7B,IACE,MAAMI,QAAiB5B,MAAM,iCAAiC1E,KAAKD,OAAOE,oBAAoB6F,mBAA0B,CACtHnB,OAAQ,OACRI,KAAMoB,EACNvB,QAAS,CACPC,cAAiB,UAAU7E,KAAKD,OAAO+E,YAIrCyB,QAAeD,EAASd,OAC9B,IAAKe,EAAOzC,QACV,MAAM,IAAI9B,MAAMuE,EAAO9G,SAAW,2BAGpC,OAAO8G,CACR,CAAC,MAAOvC,GACP,MAAM,IAAIhC,MAAMgC,aAAiBhC,MAAQgC,EAAMvE,QAAU,6BAC1D,CACF,CAKD,oBAAM+G,CAAeV,GACnB,IACE,MAAMQ,QAAiB5B,MAAM,iCAAiC1E,KAAKD,OAAOE,oBAAoB6F,WAAkB,CAC9GnB,OAAQ,MACRC,QAAS,CACPC,cAAiB,UAAU7E,KAAKD,OAAO+E,YAIrCyB,QAAeD,EAASd,OAC9B,IAAKe,EAAOzC,QACV,MAAM,IAAI9B,MAAMuE,EAAO9G,SAAW,8BAGpC,OAAO8G,CACR,CAAC,MAAOvC,GACP,MAAM,IAAIhC,MAAMgC,aAAiBhC,MAAQgC,EAAMvE,QAAU,6BAC1D,CACF,CAKD,gBAAMgH,GACJ,IACE,MAAMH,QAAiB5B,MAAM,iCAAiC1E,KAAKD,OAAOE,mBAAoB,CAC5F0E,OAAQ,MACRC,QAAS,CACPC,cAAiB,UAAU7E,KAAKD,OAAO+E,YAI3CtF,EAAI,gCAAgC8G,EAASxD,UAC7C,MAAMyD,QAAeD,EAASd,OAG9B,OAFAhG,EAAI,6BAA8B+G,GAE7BA,EAAOzC,SAQZtE,EAAI,0BAA0B+G,EAAOG,OAASH,EAAOG,OAAOhG,OAAS,YAC9D6F,IARL/G,EAAI,6BAA6B+G,EAAO9G,SAAW,mBAC5C,CACLqE,SAAS,EACTrE,QAAS8G,EAAO9G,SAAW,6BAMhC,CAAC,MAAOuE,GAEP,OADAxE,EAAI,sBAAsBwE,aAAiBhC,MAAQgC,EAAMvE,QAAU,kBAAmBuE,GAC/E,CACLF,SAAS,EACTrE,QAASuE,aAAiBhC,MAAQgC,EAAMvE,QAAU,4BAErD,CACF,mBC5TmD,EAAGqG,UAAS/F,SAAQ4G,QAAQ,CAAE,MAClF,MAAMC,aAAEA,EAAYC,eAAEA,EAAcC,SAAEA,EAAQC,MAAEA,EAAKC,OAAEA,EAAMC,UAAEA,EAASC,gBAAEA,GAAoBP,EAE9F,IAAIQ,EAAW,yCAAyCrB,IACxD,MAAMsB,EAAmB,GAgBzB,OAdIR,GAAcQ,EAAOC,KAAK,iBAAiBT,EAAazD,QAAQ,IAAK,OACrE0D,GAAgBO,EAAOC,KAAK,mBAAmBR,EAAe1D,QAAQ,IAAK,OAC3E2D,GAAUM,EAAOC,KAAK,kBACtBJ,GAAWG,EAAOC,KAAK,mBACvBH,GAAiBE,EAAOC,KAAK,yBAGjCD,EAAOC,KAAK,cAActH,EAAOE,aACjCmH,EAAOC,KAAK,WAAWtH,EAAO+E,UAE1BsC,EAAO1G,OAAS,IAClByG,GAAY,IAAIC,EAAOE,KAAK,QAI5BC,EACIC,cAAA,SAAA,CAAAC,IAAKN,EACLR,MAAO,CAACI,MAAOA,GAAS,OAAQC,OAAQA,GAAU,QAClDU,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfC,MAAO,mBAAmB/B,KAE9B,qBC7BsD,EAAGA,UAAS/F,SAAQ4G,QAAQ,CAAE,MACtF,MAAMC,aAAEA,EAAYC,eAAEA,EAAcC,SAAEA,EAAQC,MAAEA,EAAKC,OAAEA,EAAMC,UAAEA,EAASC,gBAAEA,GAAoBP,EAE9F,IAAIQ,EAAW,0CAA0CrB,IACzD,MAAMsB,EAAmB,GAiBzB,OAfIR,GAAcQ,EAAOC,KAAK,iBAAiBT,EAAazD,QAAQ,IAAK,OACrE0D,GAAgBO,EAAOC,KAAK,mBAAmBR,EAAe1D,QAAQ,IAAK,OAC3E2D,GAAUM,EAAOC,KAAK,kBACtBJ,GAAWG,EAAOC,KAAK,mBACvBH,GAAiBE,EAAOC,KAAK,yBAIjCD,EAAOC,KAAK,cAActH,EAAOE,aACjCmH,EAAOC,KAAK,WAAWtH,EAAO+E,UAE1BsC,EAAO1G,OAAS,IAClByG,GAAY,IAAIC,EAAOE,KAAK,QAI5BC,EACIC,cAAA,SAAA,CAAAC,IAAKN,EACLR,MAAO,CAACI,MAAOA,GAAS,OAAQC,OAAQA,GAAU,QAClDU,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfC,MAAO,mBAAmB/B,KAE9B,mBCpBGxE,eAA8BwE,EAAiB/F,GAEpD,OADe,IAAIF,EAAgBE,GACrByG,eAAeV,EAC/B,kCJSE,OAAOzG,CACT,eIJOiC,eAA0BvB,GAE/B,OADe,IAAIF,EAAgBE,GACrB0G,YAChB,iBJ3BM,SAAuBqB,GAC3BzI,EAAiByI,EAEbA,GAEFvI,UAAYuI,OAAO,iBAGG,oBAAXC,QACTA,OAAOC,aAAaC,QAAQ,QAAS,mBAIvC1I,EAAW,QAAC2I,UAGU,oBAAXH,QACTA,OAAOC,aAAaG,WAAW,SAGrC,gBIfO7G,eAA2BnB,EAAY+D,EAAcnE,GAE1D,OADe,IAAIF,EAAgBE,GACrBkE,YAAY9D,EAAM+D,EAClC"}