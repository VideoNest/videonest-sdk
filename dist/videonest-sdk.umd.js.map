{"version":3,"file":"videonest-sdk.umd.js","sources":["../src/utils/debug.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/components/VideonestPreview.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\nimport { generateUUID } from '../utils/helpers';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n\n  /**\n   * Upload video directly to S3 using presigned URLs\n   */\n  private async uploadVideoDirectToS3(\n    file: File,\n    presignedUrls: string[],\n    uploadId: string,\n    s3Key: string,\n    chunkSize: number,\n    onProgress: (progress: number) => void\n  ): Promise<{ success: boolean; uploadId: string; s3Key: string; parts: any[]; error?: string }> {\n    try {\n      const totalParts = presignedUrls.length;\n      const uploadedParts: any[] = [];\n\n      // Track progress for each chunk\n      const chunkProgress = new Array(totalParts).fill(0);\n\n      const updateOverallProgress = () => {\n        const totalProgress = chunkProgress.reduce((sum, progress) => sum + progress, 0);\n        const overallProgress = totalProgress / totalParts;\n        onProgress(overallProgress);\n      };\n\n      // Upload each chunk to S3\n      const chunkPromises = presignedUrls.map(async (presignedUrl, index) => {\n        const start = index * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n\n        if (chunk.size === 0) {\n          throw new Error(`Empty chunk detected for part ${index + 1}`);\n        }\n\n        return new Promise<{ PartNumber: number; ETag: string }>((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = 300000; // 5 minutes timeout\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              chunkProgress[index] = (event.loaded / event.total) * 100;\n              updateOverallProgress();\n            }\n          };\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const etag = xhr.getResponseHeader('ETag');\n              if (!etag) {\n                reject(new Error(`No ETag received for part ${index + 1}`));\n                return;\n              }\n\n              chunkProgress[index] = 100;\n              updateOverallProgress();\n\n              resolve({\n                PartNumber: index + 1,\n                ETag: etag.replace(/\"/g, '') // Remove quotes from ETag\n              });\n            } else {\n              reject(new Error(`HTTP ${xhr.status}: Failed to upload part ${index + 1}`));\n            }\n          };\n\n          xhr.onerror = () => {\n            reject(new Error(`Network error uploading part ${index + 1}`));\n          };\n\n          xhr.ontimeout = () => {\n            reject(new Error(`Timeout uploading part ${index + 1}`));\n          };\n\n          xhr.open('PUT', presignedUrl);\n          xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n          xhr.send(chunk);\n        });\n      });\n\n      // Wait for all chunks to upload\n      const parts = await Promise.all(chunkPromises);\n\n      // Sort parts by part number to ensure correct order\n      const sortedParts = parts.sort((a, b) => a.PartNumber - b.PartNumber);\n\n      return {\n        success: true,\n        uploadId: uploadId,\n        s3Key: s3Key,\n        parts: sortedParts\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Upload failed',\n        uploadId: uploadId,\n        s3Key: s3Key,\n        parts: []\n      };\n    }\n  }\n\n  /**\n   * Main video upload method\n   */\n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog(`üì§ Starting upload: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);\n\n    try {\n      const {\n        metadata,\n        onProgress = (_progress: number, _status: 'uploading' | 'finalizing' | 'failed' | 'stalled') => { },\n        thumbnail\n      } = options;\n\n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        onProgress(0, 'failed');\n        throw new Error('Thumbnail is required for video upload');\n      }\n\n      // Make sure channelId is included in metadata\n      const uploadMetadata = { ...metadata, channelId: this.config.channelId };\n\n      // Step 1: Generate presigned URLs using SDK endpoint\n      const presignedResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/generate-presigned-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileSize: file.size,\n          contentType: file.type,\n          metadata: uploadMetadata\n        })\n      });\n\n      if (!presignedResponse.ok) {\n        throw new Error(`Failed to generate presigned URLs: ${presignedResponse.status}`);\n      }\n\n      const presignedData = await presignedResponse.json();\n\n      if (!presignedData.success) {\n        throw new Error(presignedData.error || 'Failed to generate presigned URLs');\n      }\n\n      onProgress(0, 'uploading');\n\n      const uploadResult = await this.uploadVideoDirectToS3(\n        file,\n        presignedData.presignedUrls,\n        presignedData.uploadId,\n        presignedData.s3Key,\n        presignedData.chunkSize,\n        (progress) => {\n          onProgress(progress, 'uploading');\n        }\n      );\n\n      if (!uploadResult.success) {\n        throw new Error(uploadResult.error || 'S3 upload failed');\n      }\n\n      onProgress(100, 'finalizing');\n\n      // Step 3: Complete upload using SDK endpoint\n      const completeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/complete-upload`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          uploadId: uploadResult.uploadId,\n          s3Key: uploadResult.s3Key,\n          parts: uploadResult.parts\n        })\n      });\n\n      if (!completeResponse.ok) {\n        throw new Error(`Failed to complete upload: ${completeResponse.status}`);\n      }\n\n      const completeData = await completeResponse.json();\n\n      if (!completeData.success) {\n        throw new Error(completeData.message || 'Upload completion failed');\n      }\n\n      // Step 4: Upload thumbnail using SDK endpoint\n      await this.uploadThumbnail(thumbnail, completeData.data.videoId);\n      forceLog('‚úÖ Upload completed successfully:', completeData.data.videoId);\n\n      return {\n        success: true,\n        message: 'Video uploaded successfully',\n        video: {\n          id: completeData.data.videoId,\n        }\n      };\n\n    } catch (error) {\n      forceLog(`‚ùå Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload'\n      };\n    }\n  }\n\n  /**\n   * Upload thumbnail to the video\n   */\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n\n  /**\n   * Get video status\n   */\n  async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n  /**\n   * List all videos in the channel\n   */\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestPreviewProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestPreview: React.FC<VideonestPreviewProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/preview/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  // new version\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestPreview;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\nimport VideonestPreview from './components/VideonestPreview';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\nexport { VideonestPreview }; // Export the component\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\n// Minor\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":["isDebugEnabled","debugInstance","debugModule","forceLog","message","args","console","log","VideonestClient","constructor","config","this","channelId","uploadVideoDirectToS3","file","presignedUrls","uploadId","s3Key","chunkSize","onProgress","totalParts","length","chunkProgress","Array","fill","updateOverallProgress","totalProgress","reduce","sum","progress","chunkPromises","map","async","presignedUrl","index","start","end","Math","min","size","chunk","slice","Error","Promise","resolve","reject","xhr","XMLHttpRequest","timeout","upload","onprogress","event","lengthComputable","loaded","total","onload","status","etag","getResponseHeader","PartNumber","ETag","replace","onerror","ontimeout","open","setRequestHeader","send","parts","all","success","sort","a","b","error","uploadVideo","options","name","toFixed","metadata","_progress","_status","thumbnail","uploadMetadata","presignedResponse","fetch","method","headers","Authorization","apiKey","body","JSON","stringify","fileName","fileSize","contentType","type","ok","presignedData","json","uploadResult","completeResponse","completeData","uploadThumbnail","data","videoId","video","id","thumbnailFile","formData","FormData","append","response","result","getVideoStatus","listVideos","style","primaryColor","secondaryColor","darkMode","width","height","showTitle","showDescription","embedUrl","params","push","join","React","createElement","src","frameBorder","allow","allowFullScreen","title","enable","window","localStorage","setItem","disable","removeItem"],"mappings":"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"}