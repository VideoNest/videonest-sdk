{"version":3,"file":"videonest-sdk.umd.js","sources":["../src/utils/debug.ts","../src/core/client.ts","../src/index.ts","../src/components/VideonestEmbed.tsx"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n    \n    console.log('[videonest-sdk] Debug mode enabled');\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, AuthResponse, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n  private authenticated: boolean = false;\n  private channelId: number = 0;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n  }\n\n  async authenticate(): Promise<AuthResponse> {\n    forceLog('Authenticating with Videonest API...');\n    forceLog('Configuration:', { channelId: this.config.channelId, apiKeyProvided: !!this.config.apiKey });\n    \n    try {\n      forceLog('Making authentication request to https://api1.videonest.co/sdk/authenticate');\n      forceLog('Authentication request data:', { channelId: this.config.channelId, apiKey: this.config.apiKey });\n      const response = await fetch('https://api1.videonest.co/sdk/authenticate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          channelId: this.config.channelId,\n          apiKey: this.config.apiKey\n        }),\n      });\n      \n      forceLog(`Authentication response status: ${response.status}`);\n      const data = await response.json();\n      forceLog('Authentication response data:', data);\n      \n      if (!data.success) {\n        forceLog(`Authentication failed: ${data.message || 'Unknown error'}`);\n        this.authenticated = false;\n        return {\n          success: false,\n          message: data.message || 'Authentication failed'\n        };\n      }\n      \n      forceLog('Authentication successful');\n      this.authenticated = true;\n      this.channelId = this.config.channelId;\n      return {\n        success: true,\n        message: 'Authentication successful'\n      };\n    } catch (error) {\n      log(`Authentication error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      this.authenticated = false;\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Authentication failed'\n      };\n    }\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog('Starting video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n    this.checkAuthentication();\n    \n    try {\n      const { \n        metadata, \n        chunkSize = 2 * 1024 * 1024, \n        onProgress = () => {}, \n        thumbnail\n      } = options;\n      \n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        throw new Error('Thumbnail is required for video upload');\n      }\n      \n      forceLog('Upload options:', { \n        metadata, \n        chunkSize, \n        hasThumbnail: !!thumbnail\n      });\n      \n      // Generate UUID for this upload\n      const uploadId = this.generateUUID();\n      const totalChunks = Math.ceil(file.size / chunkSize);\n      forceLog(`Generated uploadId: ${uploadId}, total chunks: ${totalChunks}`);\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {\n        ...metadata,\n        channelId: metadata.channelId || this.config.channelId,\n      };\n      forceLog('Upload metadata:', uploadMetadata);\n      \n      // Upload file in chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n        \n        const formData = new FormData();\n        formData.append('chunk', chunk);\n        formData.append('uploadId', uploadId);\n        formData.append('chunkIndex', chunkIndex.toString());\n        formData.append('totalChunks', totalChunks.toString());\n        formData.append('fileName', file.name);\n        formData.append('fileSize', file.size.toString());\n\n        // Lets log ever\n        // Add metadata to the first chunk\n        if (chunkIndex === 0 && uploadMetadata) {\n          formData.append('channelId', uploadMetadata.channelId.toString());\n          if (uploadMetadata.title) formData.append('title', uploadMetadata.title);\n          if (uploadMetadata.description) formData.append('description', uploadMetadata.description);\n          \n          if (uploadMetadata.tags) {\n            // Handle tags that could be either string or array\n            const tagsValue = Array.isArray(uploadMetadata.tags) \n              ? uploadMetadata.tags.join(',') \n              : uploadMetadata.tags;\n              \n            if (tagsValue && tagsValue.length > 0) {\n              formData.append('tags', tagsValue);\n            }\n          }\n        }\n        \n        // Send the chunk\n        forceLog(`Uploading chunk ${chunkIndex + 1}/${totalChunks} (${start}-${end} bytes)`);\n        const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/upload-chunk`, {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Authorization': `Bearer ${this.config.apiKey}`,\n          },\n        });\n        \n        forceLog(`Chunk ${chunkIndex + 1} response status: ${response.status}`);\n        const result = await response.json();\n        forceLog(`Chunk ${chunkIndex + 1} upload result:`, result);\n        \n        if (!result.success) {\n          forceLog(`Chunk ${chunkIndex + 1} upload failed: ${result.message}`);\n          throw new Error(result.message || 'Chunk upload failed');\n        }\n        \n        // Update progress\n        const progress = ((chunkIndex + 1) / totalChunks) * 100;\n        forceLog(`Upload progress: ${progress.toFixed(2)}%`);\n        onProgress(progress);\n      }\n      \n      // Finalize the upload\n      forceLog('All chunks uploaded. Finalizing upload...');\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString() \n      };\n      forceLog('Finalize request data:', finalData);\n      \n      const finalizeResponse = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/finalize`, {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      forceLog(`Finalize response status: ${finalizeResponse.status}`);\n      const finalizeResult = await finalizeResponse.json();\n      forceLog('Finalize response data:', finalizeResult);\n      \n      if (!finalizeResult.success) {\n        forceLog(`Finalization failed: ${finalizeResult.message}`);\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      forceLog('Upload successfully finalized');\n      \n      // Upload the provided thumbnail\n      forceLog('Uploading user-provided thumbnail');\n      await this.uploadThumbnail(thumbnail, finalizeResult.video.id);\n      forceLog('Upload process completed successfully');\n      return finalizeResult;\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n  private checkAuthentication(): void {\n    forceLog(`Authentication check. Current status: ${this.authenticated ? 'authenticated' : 'not authenticated'}`);\n    if (!this.authenticated) {\n      forceLog('Authentication check failed. Throwing error.');\n      throw new Error('Not authenticated. Call authenticate() first.');\n    }\n    forceLog('Authentication check passed');\n  }\n  \n  \n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    this.checkAuthentication();\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n \n  private generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    this.checkAuthentication();\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    this.checkAuthentication();\n    log('Fetching videos for channel ID:', this.channelId);\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n      \n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n      \n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n}","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { AuthResponse } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\n\n// Global client instance\nlet clientInstance: VideonestClient | null = null;\n\n\nexport async function authVideonest(\n  channelId: number, \n  apiKey: string\n): Promise<AuthResponse> {\n  clientInstance = new VideonestClient({\n    channelId,\n    apiKey\n  });\n  forceLog('AUTHENTICATE FORCE LOG METHOD CALLED DIRECTLY', clientInstance);\n  \n  return await clientInstance.authenticate();\n}\n\n\nexport function getClient(): VideonestClient {\n  if (!clientInstance) {\n    throw new Error('SDK not initialized. Call authVideonest() first.');\n  }\n  \n  return clientInstance;\n}\n\n\nexport async function uploadVideo(file: File, options: any) {\n  return getClient().uploadVideo(file, options);\n}\n\nexport async function getVideoStatus(videoId: number) {\n    return getClient().getVideoStatus(videoId);\n  }\n\nexport async function listVideos() {\n  return getClient().listVideos();\n}\n\n","import * as React from 'react';\nimport { getClient } from '../index';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    showVideoDetails?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, style = {} }) => {\n  // Default styles\n  const defaultWidth = '100%';\n  const defaultHeight = '400px';\n  \n  // Use state to track initialization\n  const [sdkInitialized, setSdkInitialized] = React.useState(false);\n  const {primaryColor, secondaryColor, darkMode, showVideoDetails, width, height, showTitle, showDescription} = style;\n  \n  // Check SDK initialization in an effect hook\n  React.useEffect(() => {\n    try {\n      getClient();\n      setSdkInitialized(true);\n    } catch (e) {\n      setSdkInitialized(false);\n    }\n  }, []); // Empty dependency array means this runs once on mount\n  \n  // Build URL with style parameters if provided\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n  \n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showVideoDetails) params.push('show_video_details=true');\n  if (width) params.push(`width=${width}`);\n  if (height) params.push(`height=${height}`);\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add search params to URL if any were set\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n  \n  // Render loading or error state when SDK is not initialized\n  if (!sdkInitialized) {\n    return React.createElement('div', null, 'Please initialize Videonest SDK first using authVideonest()');\n  }\n  \n  // Use React.createElement for the iframe for maximum compatibility\n  return React.createElement('iframe', {\n    src: embedUrl,\n    width: style.width || defaultWidth,\n    frameBorder: '0',\n    allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n    allowFullScreen: true,\n    title: `Videonest video ${videoId}`\n  });\n};\n\nexport default VideonestEmbed;"],"names":["isDebugEnabled","debugInstance","debugModule","log","message","args","forceLog","console","VideonestClient","constructor","config","this","authenticated","channelId","authenticate","apiKeyProvided","apiKey","response","fetch","method","headers","body","JSON","stringify","status","data","json","success","error","Error","uploadVideo","file","options","name","size","checkAuthentication","metadata","chunkSize","onProgress","thumbnail","hasThumbnail","uploadId","generateUUID","totalChunks","Math","ceil","uploadMetadata","chunkIndex","start","end","min","chunk","slice","formData","FormData","append","toString","title","description","tags","tagsValue","Array","isArray","join","length","Authorization","result","progress","toFixed","finalData","fileName","finalizeResponse","finalizeResult","uploadThumbnail","video","id","thumbnailFile","videoId","replace","c","r","random","getVideoStatus","listVideos","videos","clientInstance","getClient","style","sdkInitialized","setSdkInitialized","React","useState","primaryColor","secondaryColor","darkMode","showVideoDetails","width","height","showTitle","showDescription","useEffect","e","embedUrl","params","push","createElement","src","frameBorder","allow","allowFullScreen","async","enable","window","localStorage","setItem","disable","removeItem"],"mappings":"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"}