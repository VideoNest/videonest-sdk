{"version":3,"file":"videonest-sdk.umd.js","sources":["../src/utils/debug.ts","../src/utils/uploadOptimizationManager.ts","../src/utils/helpers.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n    \n    console.log('[videonest-sdk] Debug mode enabled');\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","// uploadOptimizationManager.ts - SDK v2 Upgrade\nimport { generateUUID } from './helpers'\nimport { VideonestConfig, VideoMetadata } from '../types'\n\nexport function calculateOptimalChunkSize(fileSize: number, connectionSpeed: number | null = null, totalConcurrentUploads: number = 1): number {\n  let baseChunkSize: number;\n  \n  // AGGRESSIVE base sizes for single SDK uploads (larger than frontend)\n  if (fileSize < 50 * 1024 * 1024) {        // < 50MB\n    baseChunkSize = 8 * 1024 * 1024;        // 8MB (vs 2MB frontend)\n  } else if (fileSize < 500 * 1024 * 1024) { // < 500MB  \n    baseChunkSize = 25 * 1024 * 1024;       // 25MB (vs 5MB frontend)\n  } else if (fileSize < 2 * 1024 * 1024 * 1024) { // < 2GB\n    baseChunkSize = 50 * 1024 * 1024;       // 50MB (vs 10MB frontend)\n  } else {\n    baseChunkSize = 100 * 1024 * 1024;      // 100MB (vs 20MB frontend)\n  }\n  \n  // SDK is always single video, so no reduction needed like frontend\n  // But still respect connection speed\n  if (connectionSpeed) {\n    if (connectionSpeed > 50) {             // > 50 Mbps - blazing fast\n      baseChunkSize = Math.min(baseChunkSize * 2, 200 * 1024 * 1024); // Up to 200MB!\n    } else if (connectionSpeed > 25) {      // > 25 Mbps - fast connection  \n      baseChunkSize = Math.min(baseChunkSize * 1.5, 100 * 1024 * 1024);\n    } else if (connectionSpeed > 10) {      // > 10 Mbps - decent connection\n      // Keep base size\n    } else if (connectionSpeed < 5) {       // < 5 Mbps - slow connection  \n      baseChunkSize = Math.max(baseChunkSize * 0.5, 1024 * 1024); // Min 1MB\n    }\n  }\n  \n  return Math.floor(baseChunkSize);\n}\n\n// Enhanced connection speed detector from frontend v2\nexport class ConnectionSpeedDetector {\n  private samples: number[] = [];\n  public avgSpeed: number | null = null;\n  private globalThroughput: number = 0;\n  \n  recordChunkUpload(chunkSize: number, uploadTime: number): number {\n    const speedMbps = (chunkSize * 8) / (uploadTime / 1000) / 1_000_000;\n    \n    this.samples.push(speedMbps);\n    if (this.samples.length > 5) { // Keep more samples for stability\n      this.samples.shift();\n    }\n    \n    // Calculate weighted average (more weight to recent samples)\n    this.avgSpeed = this.calculateWeightedAverage(this.samples);\n    this.globalThroughput = this.samples.reduce((a, b) => a + b, 0);\n    \n    return this.avgSpeed;\n  }\n  \n  private calculateWeightedAverage(samples: number[]): number {\n    if (samples.length === 0) return 0;\n    \n    let weightedSum = 0;\n    let totalWeight = 0;\n    \n    samples.forEach((speed, index) => {\n      const weight = index + 1; // More recent samples get higher weight\n      weightedSum += speed * weight;\n      totalWeight += weight;\n    });\n    \n    return weightedSum / totalWeight;\n  }\n  \n  shouldReduceConcurrency(): boolean {\n    return this.avgSpeed !== null && (this.avgSpeed < 5 || this.globalThroughput < 10);\n  }\n  \n  shouldIncreaseConcurrency(): boolean {\n    return this.avgSpeed !== null && this.avgSpeed > 20 && this.globalThroughput > 50 && this.samples.length >= 3;\n  }\n}\n\nexport class UploadOptimizationManager {\n  private file: File;\n  private metadata: VideoMetadata;\n  private config: VideonestConfig;\n  private currentConcurrency: number;\n  private maxConcurrency: number;\n  \n  private uploadQueue: Array<{\n    index: number;\n    uploadId: string;\n    retries: number;\n    maxRetries: number;\n    priority: number;\n  }> = [];\n  \n  private activeUploads = new Map();\n  private completedChunks = new Set<number>();\n  private failedChunks = new Set<number>();\n  private speedDetector = new ConnectionSpeedDetector();\n  \n  private chunkSize: number;\n  private totalChunks: number;\n  private uploadId: string = '';\n  \n  // Enhanced progress tracking\n  private chunkBytesUploaded = new Map<number, number>();\n  private totalBytesUploaded = 0;\n  private startTime: number = 0;\n  private lastProgressReport: number = 0;\n  private stalledChunks = new Set<number>();\n  private stallMonitor?: NodeJS.Timeout;\n  \n  constructor(file: File, metadata: VideoMetadata, config: VideonestConfig) {\n    this.file = file;\n    this.metadata = metadata;\n    this.config = config;\n    \n    // More aggressive for single SDK uploads\n    this.maxConcurrency = 10; // Higher than frontend's max of 6\n    this.currentConcurrency = 4; // Start higher than frontend's 2\n    \n    // Calculate chunk size with SDK-optimized settings\n    this.chunkSize = calculateOptimalChunkSize(file.size, null, 1);\n    this.totalChunks = Math.ceil(file.size / this.chunkSize);\n    \n    console.log(`🚀 SDK Upload manager initialized: ${this.totalChunks} chunks, ${this.maxConcurrency} max concurrency, ${(this.chunkSize / 1024 / 1024).toFixed(1)}MB chunk size`);\n  }\n  \n  async upload(onProgress: (progress: number) => void): Promise<{ uploadId: string; totalChunks: number }> {\n    const uploadId = generateUUID();\n    this.uploadId = uploadId;\n    this.startTime = Date.now();\n    \n    // Initialize bytes tracking for each chunk\n    for (let i = 0; i < this.totalChunks; i++) {\n      this.chunkBytesUploaded.set(i, 0);\n    }\n    \n    // Create upload queue with priority (first and last chunks prioritized)\n    for (let i = 0; i < this.totalChunks; i++) {\n      this.uploadQueue.push({\n        index: i,\n        uploadId,\n        retries: 0,\n        maxRetries: 3,\n        priority: this.calculateChunkPriority(i)\n      });\n    }\n    \n    // Sort queue by priority\n    this.uploadQueue.sort((a, b) => b.priority - a.priority);\n    \n    // Start workers\n    const workerPromises = [];\n    for (let i = 0; i < this.currentConcurrency; i++) {\n      workerPromises.push(this.uploadWorker(onProgress));\n    }\n    \n    // Monitor for stalled uploads\n    this.stallMonitor = setInterval(() => this.checkForStalledUploads(), 10000);\n    \n    await Promise.all(workerPromises);\n    \n    if (this.stallMonitor) {\n      clearInterval(this.stallMonitor);\n    }\n    \n    if (this.failedChunks.size > 0) {\n      throw new Error(`Failed to upload ${this.failedChunks.size} chunks after retries`);\n    }\n    \n    console.log(`✅ SDK Upload completed in ${((Date.now() - this.startTime) / 1000).toFixed(1)}s`);\n    return { uploadId, totalChunks: this.totalChunks };\n  }\n  \n  private calculateChunkPriority(index: number): number {\n    // First chunk gets highest priority (contains metadata)\n    if (index === 0) return 100;\n    // Last chunk gets high priority (allows early finalization check)\n    if (index === this.totalChunks - 1) return 90;\n    // Middle chunks get normal priority\n    return 50;\n  }\n  \n  private async uploadWorker(onProgress: (progress: number) => void): Promise<void> {\n    while (this.uploadQueue.length > 0 || this.activeUploads.size > 0) {\n      // Check if we should process more uploads\n      if (this.uploadQueue.length > 0 && this.activeUploads.size < this.currentConcurrency) {\n        const chunkInfo = this.uploadQueue.shift();\n        if (chunkInfo) {\n          try {\n            await this.uploadChunk(chunkInfo, onProgress);\n          } catch (error) {\n            this.handleChunkError(chunkInfo, error as Error);\n          }\n        }\n      } else {\n        // Wait for active uploads to complete\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n  }\n  \n  private async uploadChunk(chunkInfo: any, onProgress: (progress: number) => void): Promise<any> {\n    const { index, uploadId } = chunkInfo;\n    \n    const start = index * this.chunkSize;\n    const end = Math.min(start + this.chunkSize, this.file.size);\n    const chunk = this.file.slice(start, end);\n    const chunkSize = chunk.size;\n    \n    if (chunkSize === 0) {\n      throw new Error(`Empty chunk detected for index ${index}`);\n    }\n    \n    this.activeUploads.set(index, { ...chunkInfo, startTime: Date.now() });\n    \n    const formData = new FormData();\n    formData.append('chunk', chunk);\n    formData.append('uploadId', uploadId);\n    formData.append('chunkIndex', index.toString());\n    formData.append('totalChunks', this.totalChunks.toString());\n    formData.append('fileName', this.file.name);\n    formData.append('fileSize', this.file.size.toString());\n    formData.append('totalConcurrentVideos', '1'); // Always 1 for SDK\n    \n    // Add metadata to first chunk\n    if (index === 0) {\n      formData.append('channelId', this.metadata.channelId.toString());\n      if (this.metadata.title) formData.append('title', this.metadata.title);\n      if (this.metadata.description) formData.append('description', this.metadata.description);\n      \n      if (this.metadata.tags) {\n        const tagsValue = Array.isArray(this.metadata.tags) \n          ? this.metadata.tags.join(',') \n          : this.metadata.tags;\n          \n        if (tagsValue && tagsValue.length > 0) {\n          formData.append('tags', tagsValue);\n        }\n      }\n    }\n    \n    const startTime = Date.now();\n    const baseUrl = this.config.baseUrl || 'https://api1.videonest.co';\n    \n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      \n      // Increased timeout for larger chunks\n      xhr.timeout = 120000; // 2 minutes\n      \n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          this.chunkBytesUploaded.set(index, event.loaded);\n          this.totalBytesUploaded = Array.from(this.chunkBytesUploaded.values())\n            .reduce((sum, bytes) => sum + bytes, 0);\n          \n          // Throttle progress updates\n          const now = Date.now();\n          if (now - this.lastProgressReport > 100) {\n            const progressPercentage = (this.totalBytesUploaded / this.file.size) * 100;\n            onProgress(progressPercentage);\n            this.lastProgressReport = now;\n          }\n        }\n      };\n      \n      // Use v2 route like frontend\n      xhr.open('POST', `${baseUrl}/sdk/${this.config.channelId}/upload-chunk-v2`);\n      xhr.setRequestHeader('Authorization', `Bearer ${this.config.apiKey}`);\n      \n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const result = JSON.parse(xhr.responseText);\n            if (!result.success) {\n              reject(new Error(result.message || 'Chunk upload failed'));\n            } else {\n            const uploadTime = Date.now() - startTime;\n              const currentSpeed = this.speedDetector.recordChunkUpload(chunkSize, uploadTime);\n              \n              this.activeUploads.delete(index);\n              this.completedChunks.add(index);\n              this.chunkBytesUploaded.set(index, chunkSize);\n              \n              // Dynamic concurrency adjustment\n              if (this.completedChunks.size % 3 === 0) {\n                this.adjustConcurrency(currentSpeed);\n              }\n              \n              resolve(result);\n            }\n          } catch (e) {\n            reject(new Error('Invalid response from server'));\n          }\n        } else {\n          reject(new Error(`HTTP error: ${xhr.status}`));\n        }\n      };\n      \n      xhr.onerror = () => reject(new Error('Network error during upload'));\n      xhr.ontimeout = () => reject(new Error('Upload timeout - chunk may be too large'));\n      \n      xhr.send(formData);\n    });\n  }\n  \n  private handleChunkError(chunkInfo: any, error: Error): void {\n    console.error(`Chunk ${chunkInfo.index} upload failed:`, error.message);\n    \n    if (chunkInfo.retries < chunkInfo.maxRetries) {\n      chunkInfo.retries++;\n      // Add delay before retry with exponential backoff\n      setTimeout(() => {\n        this.uploadQueue.unshift(chunkInfo); // Add to front for priority\n      }, Math.pow(2, chunkInfo.retries) * 1000);\n    } else {\n      this.failedChunks.add(chunkInfo.index);\n      this.activeUploads.delete(chunkInfo.index);\n    }\n  }\n  \n  private adjustConcurrency(currentSpeed: number): void {\n    const oldConcurrency = this.currentConcurrency;\n    \n    // More aggressive adjustments for single file SDK uploads\n    if (this.speedDetector.shouldReduceConcurrency()) {\n      this.currentConcurrency = Math.max(1, this.currentConcurrency - 1);\n      console.log(`🐌 SDK: Reducing concurrency to ${this.currentConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n    } else if (this.speedDetector.shouldIncreaseConcurrency() && this.currentConcurrency < this.maxConcurrency) {\n      // More aggressive increases for SDK\n      if (currentSpeed > 50) {\n        this.currentConcurrency = Math.min(this.currentConcurrency + 2, this.maxConcurrency);\n        console.log(`🚀 SDK: Boosting concurrency to ${this.currentConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n      } else if (currentSpeed > 25) {\n        this.currentConcurrency = Math.min(this.currentConcurrency + 1, this.maxConcurrency);\n        console.log(`⚡ SDK: Increasing concurrency to ${this.currentConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n      }\n    }\n    \n    // Start additional workers if concurrency increased\n    if (this.currentConcurrency > oldConcurrency && this.uploadQueue.length > 0) {\n      const additionalWorkers = this.currentConcurrency - oldConcurrency;\n      for (let i = 0; i < additionalWorkers; i++) {\n        this.uploadWorker(() => {}); // Start worker without progress callback\n      }\n    }\n  }\n  \n  private checkForStalledUploads(): void {\n    const now = Date.now();\n    const stallThreshold = 30000; // 30 seconds\n    \n    for (const [index, uploadInfo] of this.activeUploads.entries()) {\n      if (now - uploadInfo.startTime > stallThreshold) {\n        console.warn(`⚠️ SDK: Chunk ${index} appears stalled, will retry`);\n        this.stalledChunks.add(index);\n        \n        // Cancel and retry stalled upload\n        this.activeUploads.delete(index);\n        this.uploadQueue.unshift({\n          ...uploadInfo,\n          retries: uploadInfo.retries + 1\n        });\n      }\n    }\n  }\n  \n  getUploadStats() {\n    return {\n      totalChunks: this.totalChunks,\n      completedChunks: this.completedChunks.size,\n      failedChunks: this.failedChunks.size,\n      activeUploads: this.activeUploads.size,\n      currentConcurrency: this.currentConcurrency,\n      avgSpeed: this.speedDetector.avgSpeed,\n      progress: (this.totalBytesUploaded / this.file.size) * 100\n    };\n  }\n}"," \nexport function generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\nimport { generateUUID } from '../utils/helpers';\nimport { UploadOptimizationManager } from '../utils/uploadOptimizationManager';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog('Starting optimized video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n    \n    try {\n      const { \n        metadata, \n        onProgress = () => {}, \n        thumbnail\n      } = options;\n      \n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        throw new Error('Thumbnail is required for video upload');\n      }\n      \n      forceLog('Upload options:', { \n        metadata, \n        hasThumbnail: !!thumbnail\n      });\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {\n        ...metadata,\n        channelId: this.config.channelId,\n      };\n      forceLog('Upload metadata:', uploadMetadata);\n      \n      // Create upload optimization manager\n      const uploadManager = new UploadOptimizationManager(\n        file, \n        uploadMetadata, \n        this.config\n      );\n      \n      // Upload chunks with optimization\n      const { uploadId, totalChunks } = await uploadManager.upload(onProgress);\n      \n      forceLog(`All chunks uploaded. Finalizing upload... (uploadId: ${uploadId}, totalChunks: ${totalChunks})`);\n      \n      // Finalize using v2 route with metadata in request body\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString(),\n        // Include metadata in finalization request (like frontend v2)\n        title: uploadMetadata.title || 'Untitled Video',\n        description: uploadMetadata.description || '',\n        tags: uploadMetadata.tags ? (Array.isArray(uploadMetadata.tags) ? uploadMetadata.tags.join(',') : uploadMetadata.tags) : ''\n      };\n      forceLog('Finalize request data:', finalData);\n      \n      // Use new SDK v2 finalize route\n      const finalizeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/finalize-v2`, {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      forceLog(`Finalize response status: ${finalizeResponse.status}`);\n      const finalizeResult = await finalizeResponse.json();\n      forceLog('Finalize response data:', finalizeResult);\n      \n      if (!finalizeResult.success) {\n        forceLog(`Finalization failed: ${finalizeResult.message}`);\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      forceLog('Upload successfully finalized');\n      \n      // Upload the provided thumbnail\n      forceLog('Uploading user-provided thumbnail');\n      await this.uploadThumbnail(thumbnail, finalizeResult.video.id);\n      forceLog('Upload process completed successfully');\n      \n      return finalizeResult;\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      \n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n  private async trackVideoUpload(action: string, sessionData: any) {\n    log(\"Tracking video upload:\", action, sessionData);\n    \n    try {\n      let endpoint = '';\n      let method = 'POST';\n      let requestBody: any;\n      const baseUrl = 'https://api1.videonest.co';\n  \n      if (action === 'start') {\n        // CREATE new session\n        endpoint = '/video-stats/upload-sessions';\n        method = 'POST';\n        requestBody = {\n          session_id: sessionData.sessionId,\n          user_id: sessionData.userId,\n          video_id: sessionData.videoId || 0, // Will be updated later\n          filename: sessionData.filename,\n          file_size: sessionData.fileSize,\n          chunks_count: sessionData.chunksCount || 0,\n          status: 'in_progress'\n          // start_time will default to NOW() in the API\n        };\n      } else if (action === 'complete' || action === 'failed') {\n        // UPDATE existing session\n        endpoint = `/video-stats/upload-sessions/${sessionData.sessionId}`;\n        method = 'POST'; // API uses POST for updates\n        requestBody = {\n          video_id: sessionData.videoId,\n          end_time: new Date().toISOString(),\n          status: sessionData.status\n        };\n        \n        if (sessionData.startTime) {\n          const duration = Date.now() - sessionData.startTime;\n          requestBody.total_duration = `${Math.floor(duration / 1000)} seconds`;\n          \n          // Calculate average speed in Mbps\n          if (sessionData.fileSize && duration > 0) {\n            const speedBps = (sessionData.fileSize * 8) / (duration / 1000); // bits per second\n            requestBody.avg_speed_mbps = parseFloat((speedBps / 1_000_000).toFixed(2)); // Convert to Mbps\n          }\n        }\n      }\n  \n      const url = `${baseUrl}${endpoint}`;\n      log(\"Upload session request:\", { action, url, method, body: requestBody });\n  \n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n\n      // Add authentication headers\n      if (this.config.apiKey) {\n        headers['X-API-Key'] = this.config.apiKey;\n      }\n\n      if (this.config.channelId) {\n        headers['X-Channel-ID'] = this.config.channelId.toString();\n      }\n  \n      const response = await fetch(url, {\n        method,\n        headers,\n        body: JSON.stringify(requestBody),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        log('Failed to track upload session:', errorData);\n        return { success: false, error: 'Failed to track upload session' };\n      }\n  \n      const data = await response.json();\n      return { success: true, ...data };\n    } catch (error) {\n      log('Error tracking upload session:', error instanceof Error ? error.message : String(error));\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to track upload session' };\n    }\n  }\n\n\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n\n\n\n\n\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n      \n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n      \n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n\n\n\n\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\n\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":["isDebugEnabled","debugInstance","debugModule","log","message","args","forceLog","console","ConnectionSpeedDetector","constructor","this","samples","avgSpeed","globalThroughput","recordChunkUpload","chunkSize","uploadTime","speedMbps","push","length","shift","calculateWeightedAverage","reduce","a","b","weightedSum","totalWeight","forEach","speed","index","weight","shouldReduceConcurrency","shouldIncreaseConcurrency","UploadOptimizationManager","file","metadata","config","uploadQueue","activeUploads","Map","completedChunks","Set","failedChunks","speedDetector","uploadId","chunkBytesUploaded","totalBytesUploaded","startTime","lastProgressReport","stalledChunks","maxConcurrency","currentConcurrency","fileSize","connectionSpeed","baseChunkSize","Math","min","max","floor","calculateOptimalChunkSize","size","totalChunks","ceil","toFixed","upload","onProgress","replace","c","r","random","toString","Date","now","i","set","retries","maxRetries","priority","calculateChunkPriority","sort","workerPromises","uploadWorker","stallMonitor","setInterval","checkForStalledUploads","Promise","all","clearInterval","Error","chunkInfo","uploadChunk","error","handleChunkError","resolve","setTimeout","start","end","chunk","slice","formData","FormData","append","name","channelId","title","description","tags","tagsValue","Array","isArray","join","baseUrl","reject","xhr","XMLHttpRequest","timeout","onprogress","event","lengthComputable","loaded","from","values","sum","bytes","progressPercentage","open","setRequestHeader","apiKey","onload","status","result","JSON","parse","responseText","success","currentSpeed","delete","add","adjustConcurrency","e","onerror","ontimeout","send","unshift","pow","oldConcurrency","additionalWorkers","uploadInfo","entries","warn","getUploadStats","progress","VideonestClient","uploadVideo","options","thumbnail","hasThumbnail","uploadMetadata","uploadManager","finalData","fileName","finalizeResponse","fetch","method","body","stringify","headers","Authorization","finalizeResult","json","uploadThumbnail","video","id","trackVideoUpload","action","sessionData","requestBody","endpoint","session_id","sessionId","user_id","userId","video_id","videoId","filename","file_size","chunks_count","chunksCount","end_time","toISOString","duration","total_duration","speedBps","avg_speed_mbps","parseFloat","url","response","ok","errorData","catch","String","thumbnailFile","getVideoStatus","listVideos","videos","style","primaryColor","secondaryColor","darkMode","width","height","showTitle","showDescription","embedUrl","params","React","createElement","src","frameBorder","allow","allowFullScreen","async","enable","window","localStorage","setItem","disable","removeItem"],"mappings":"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"}