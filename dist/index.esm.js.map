{"version":3,"file":"index.esm.js","sources":["../src/utils/debug.ts","../src/utils/helpers.ts","../src/utils/uploadOptimizationManager.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n    \n    console.log('[videonest-sdk] Debug mode enabled');\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}"," \nexport function generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }","// uploadOptimizationManager.ts\nimport { generateUUID } from './helpers'\nimport { VideonestConfig, VideoMetadata } from '../types'\n\n\nexport function calculateOptimalChunkSize(fileSize: number, connectionSpeed: number | null = null): number {\n  let baseChunkSize: number;\n  \n  // MUCH LARGER base sizes for single file uploads\n  if (fileSize < 50 * 1024 * 1024) {        // < 50MB\n    baseChunkSize = 5 * 1024 * 1024;        // 5MB\n  } else if (fileSize < 500 * 1024 * 1024) { // < 500MB  \n    baseChunkSize = 15 * 1024 * 1024;       // 15MB\n  } else if (fileSize < 2 * 1024 * 1024 * 1024) { // < 2GB\n    baseChunkSize = 35 * 1024 * 1024;       // 35MB\n  } else {\n    baseChunkSize = 75 * 1024 * 1024;       // 75MB\n  }\n  \n  // AGGRESSIVE speed-based adjustments for single file\n  if (connectionSpeed) {\n    if (connectionSpeed > 50) {             // > 50 Mbps - blazing fast\n      baseChunkSize = Math.min(baseChunkSize * 3, 150 * 1024 * 1024); // Up to 150MB chunks!\n    } else if (connectionSpeed > 15) {      // > 15 Mbps - fast connection  \n      baseChunkSize = Math.min(baseChunkSize * 2, 100 * 1024 * 1024); // Up to 100MB chunks\n    } else if (connectionSpeed > 8) {       // > 8 Mbps - decent connection\n      baseChunkSize = Math.min(baseChunkSize * 1.5, 50 * 1024 * 1024);\n    } else if (connectionSpeed < 3) {       // < 3 Mbps - slow connection  \n      baseChunkSize = Math.max(baseChunkSize * 0.3, 1024 * 1024); // Min 1MB\n    }\n  }\n  \n  return Math.floor(baseChunkSize);\n}\n\nexport class ConnectionSpeedDetector {\n  private samples: number[] = [];\n  public avgSpeed: number | null = null;\n  \n  recordChunkUpload(chunkSize: number, uploadTime: number): number {\n    const speedMbps = (chunkSize * 8) / (uploadTime / 1000) / 1_000_000;\n    this.samples.push(speedMbps);\n    \n    // Keep only last 3 samples for FASTER reaction\n    if (this.samples.length > 3) {\n      this.samples.shift();\n    }\n    \n    this.avgSpeed = this.samples.reduce((a, b) => a + b) / this.samples.length;\n    return this.avgSpeed;\n  }\n  \n  shouldAdjustConcurrency(): boolean {\n    return this.samples.length >= 2; // Adjust after just 2 samples\n  }\n}\n\nexport class UploadOptimizationManager {\n  private file: File;\n  private metadata: VideoMetadata;\n  private config: VideonestConfig;\n  private maxConcurrency: number;\n  private maxPossibleConcurrency: number = 12; // Aggressive for single file\n  \n  private uploadQueue: Array<{\n    index: number;\n    uploadId: string;\n    retries: number;\n    maxRetries: number;\n  }> = [];\n  \n  private activeUploads = new Map();\n  private completedChunks = new Set<number>();\n  private failedChunks = new Set<number>();\n  private speedDetector = new ConnectionSpeedDetector();\n  \n  private chunkSize: number;\n  private totalChunks: number;\n  private uploadId: string = '';\n  \n  // Track bytes uploaded per chunk\n  private chunkBytesUploaded = new Map<number, number>();\n  private totalBytesUploaded = 0;\n  \n  // Track worker promises for dynamic scaling\n  private workerPromises: Promise<void>[] = [];\n  \n  constructor(file: File, metadata: VideoMetadata, config: VideonestConfig) {\n    this.file = file;\n    this.metadata = metadata;\n    this.config = config;\n    \n    // Start aggressive for single file uploads\n    this.maxConcurrency = 6;\n    \n    // Calculate chunk size ONCE and stick with it\n    this.chunkSize = calculateOptimalChunkSize(file.size);\n    this.totalChunks = Math.ceil(file.size / this.chunkSize);\n  }\n  \n  async upload(onProgress: (progress: number) => void): Promise<{ uploadId: string; totalChunks: number }> {\n    const uploadId = generateUUID();\n    this.uploadId = uploadId;\n    \n    // Initialize bytes tracking for each chunk\n    for (let i = 0; i < this.totalChunks; i++) {\n      this.chunkBytesUploaded.set(i, 0);\n    }\n    \n    // Create upload queue with FIXED chunk calculations\n    for (let i = 0; i < this.totalChunks; i++) {\n      this.uploadQueue.push({\n        index: i,\n        uploadId,\n        retries: 0,\n        maxRetries: 2\n      });\n    }\n    \n    // Start initial concurrent uploads\n    for (let i = 0; i < this.maxConcurrency; i++) {\n      const workerPromise = this.uploadWorker(onProgress);\n      this.workerPromises.push(workerPromise);\n    }\n    \n    // Wait for all uploads to complete\n    await Promise.all(this.workerPromises);\n    \n    if (this.failedChunks.size > 0) {\n      throw new Error(`Failed to upload ${this.failedChunks.size} chunks`);\n    }\n    \n    return { uploadId, totalChunks: this.totalChunks };\n  }\n  \n  private async uploadWorker(onProgress: (progress: number) => void): Promise<void> {\n    while (this.uploadQueue.length > 0 || this.activeUploads.size > 0) {\n      // Get next chunk to upload\n      const chunkInfo = this.uploadQueue.shift();\n      if (!chunkInfo) {\n        // Wait for active uploads to finish\n        await new Promise(resolve => setTimeout(resolve, 100));\n        continue;\n      }\n      \n      try {\n        await this.uploadChunk(chunkInfo, onProgress);\n      } catch (error) {\n        console.error(`Chunk ${chunkInfo.index} upload failed:`, error);\n        \n        if (chunkInfo.retries < chunkInfo.maxRetries) {\n          chunkInfo.retries++;\n          this.uploadQueue.push(chunkInfo); // Retry\n        } else {\n          this.failedChunks.add(chunkInfo.index);\n        }\n      }\n    }\n  }\n  \n  private async uploadChunk(chunkInfo: { index: number; uploadId: string; retries: number; maxRetries: number }, onProgress: (progress: number) => void): Promise<any> {\n    const { index, uploadId } = chunkInfo;\n    \n    // Use FIXED chunk size calculations - no dynamic changes\n    const start = index * this.chunkSize;\n    const end = Math.min(start + this.chunkSize, this.file.size);\n    const chunk = this.file.slice(start, end);\n    const chunkSize = chunk.size; // Actual chunk size\n    \n    if (chunkSize === 0) {\n      throw new Error(`Empty chunk detected for index ${index}`);\n    }\n    \n    this.activeUploads.set(index, chunkInfo);\n    \n    const formData = new FormData();\n    formData.append('chunk', chunk);\n    formData.append('uploadId', uploadId);\n    formData.append('chunkIndex', index.toString());\n    formData.append('totalChunks', this.totalChunks.toString());\n    formData.append('fileName', this.file.name);\n    formData.append('fileSize', this.file.size.toString());\n    \n    // Add metadata to first chunk\n    if (index === 0) {\n      formData.append('channelId', this.metadata.channelId.toString());\n      if (this.metadata.title) formData.append('title', this.metadata.title);\n      if (this.metadata.description) formData.append('description', this.metadata.description);\n      \n      if (this.metadata.tags) {\n        // Handle tags that could be either string or array\n        const tagsValue = Array.isArray(this.metadata.tags) \n          ? this.metadata.tags.join(',') \n          : this.metadata.tags;\n          \n        if (tagsValue && tagsValue.length > 0) {\n          formData.append('tags', tagsValue);\n        }\n      }\n    }\n    \n    const startTime = Date.now();\n    const baseUrl = this.config.baseUrl || 'https://api1.videonest.co';\n    \n    // Use XMLHttpRequest instead of fetch to track progress during upload\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      \n      // Track progress during upload\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          // Update progress for this specific chunk\n          const chunkProgress = event.loaded;\n          this.chunkBytesUploaded.set(index, chunkProgress);\n          \n          // Calculate total bytes across all chunks\n          this.totalBytesUploaded = Array.from(this.chunkBytesUploaded.values())\n            .reduce((sum, bytes) => sum + bytes, 0);\n          \n          // Report progress as percentage\n          const progressPercentage = (this.totalBytesUploaded / this.file.size) * 100;\n          onProgress(progressPercentage);\n        }\n      };\n      \n      xhr.open('POST', `${baseUrl}/sdk/${this.config.channelId}/upload-chunk`);\n      xhr.setRequestHeader('Authorization', `Bearer ${this.config.apiKey}`);\n      \n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const result = JSON.parse(xhr.responseText);\n            if (!result.success) {\n              reject(new Error(result.message || 'Chunk upload failed'));\n            } else {\n              const uploadTime = Date.now() - startTime;\n              // Record upload time for speed calculation\n              const currentSpeed = this.speedDetector.recordChunkUpload(chunkSize, uploadTime);\n              \n              // Mark this chunk as completed\n              this.activeUploads.delete(index);\n              this.completedChunks.add(index);\n              \n              // Set final chunk size when completed\n              this.chunkBytesUploaded.set(index, chunkSize);\n              \n              // ONLY adjust concurrency, NOT chunk size\n              if (this.speedDetector.shouldAdjustConcurrency() && index < this.totalChunks * 0.7) {\n                this.adjustConcurrency(currentSpeed);\n              }\n              \n              resolve(result);\n            }\n          } catch (e) {\n            reject(new Error('Invalid response from server'));\n          }\n        } else {\n          reject(new Error('HTTP error: ' + xhr.status));\n        }\n      };\n      \n      xhr.onerror = () => reject(new Error('Network error during upload'));\n      xhr.send(formData);\n    });\n  }\n  \n  private adjustConcurrency(currentSpeed: number): void {\n    const oldConcurrency = this.maxConcurrency;\n    \n    // AGGRESSIVE scaling for single-file uploads\n    if (currentSpeed > 50 && this.maxConcurrency < this.maxPossibleConcurrency) {\n      this.maxConcurrency = Math.min(this.maxConcurrency + 2, this.maxPossibleConcurrency);\n      console.log(`🚀 SDK: Boosting concurrency to ${this.maxConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n    } else if (currentSpeed > 25 && this.maxConcurrency < 10) {\n      this.maxConcurrency = Math.min(this.maxConcurrency + 1, 10);\n      console.log(`⚡ SDK: Increasing concurrency to ${this.maxConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n    } else if (currentSpeed > 15 && this.maxConcurrency < 8) {\n      this.maxConcurrency = Math.min(this.maxConcurrency + 1, 8);\n      console.log(`⚡ SDK: Moderate increase to ${this.maxConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n    } else if (currentSpeed < 5 && this.maxConcurrency > 2) {\n      this.maxConcurrency = Math.max(this.maxConcurrency - 1, 2);\n      console.log(`🐌 SDK: Reducing concurrency to ${this.maxConcurrency} (${currentSpeed.toFixed(1)} Mbps)`);\n    } else if (currentSpeed < 1 && this.maxConcurrency > 1) {\n      this.maxConcurrency = 1;\n      console.log(`🚨 SDK: Emergency single thread (${currentSpeed.toFixed(1)} Mbps)`);\n    }\n    \n    // Start additional workers if concurrency increased\n    if (this.maxConcurrency > oldConcurrency) {\n      const additionalWorkers = this.maxConcurrency - oldConcurrency;\n      for (let i = 0; i < additionalWorkers; i++) {\n        const workerPromise = this.uploadWorker(() => {}); // Empty progress callback for additional workers\n        this.workerPromises.push(workerPromise);\n      }\n    }\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\nimport { generateUUID } from '../utils/helpers';\nimport { UploadOptimizationManager } from '../utils/uploadOptimizationManager';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    const sessionId = generateUUID();\n    const startTime = Date.now();\n    \n    forceLog('Starting optimized video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n    \n    // Track upload start\n    await this.trackVideoUpload('start', {\n      sessionId,\n      userId: 'SDK',\n      filename: file.name,\n      fileSize: file.size,\n      chunksCount: 0, // Will be calculated\n      startTime,\n      status: 'in_progress'\n    });\n    \n    try {\n      const { \n        metadata, \n        onProgress = () => {}, \n        thumbnail\n      } = options;\n      \n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        throw new Error('Thumbnail is required for video upload');\n      }\n      \n      forceLog('Upload options:', { \n        metadata, \n        hasThumbnail: !!thumbnail\n      });\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {\n        ...metadata,\n        channelId: this.config.channelId,\n      };\n      forceLog('Upload metadata:', uploadMetadata);\n      \n      // Create upload optimization manager\n      const uploadManager = new UploadOptimizationManager(\n        file, \n        uploadMetadata, \n        this.config\n      );\n      \n      // Upload with optimization\n      const { uploadId, totalChunks } = await uploadManager.upload(onProgress);\n      \n      forceLog(`All chunks uploaded. Finalizing upload... (uploadId: ${uploadId}, totalChunks: ${totalChunks})`);\n      \n      // Finalize the upload\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString() \n      };\n      forceLog('Finalize request data:', finalData);\n      \n      const finalizeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/finalize`, {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      forceLog(`Finalize response status: ${finalizeResponse.status}`);\n      const finalizeResult = await finalizeResponse.json();\n      forceLog('Finalize response data:', finalizeResult);\n      \n      if (!finalizeResult.success) {\n        forceLog(`Finalization failed: ${finalizeResult.message}`);\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      forceLog('Upload successfully finalized');\n      \n      // Upload the provided thumbnail\n      forceLog('Uploading user-provided thumbnail');\n      await this.uploadThumbnail(thumbnail, finalizeResult.video.id);\n      forceLog('Upload process completed successfully');\n      \n      // Track successful completion\n      await this.trackVideoUpload('complete', {\n        sessionId,\n        userId: 'SDK',\n        videoId: finalizeResult.video?.id || 0,\n        filename: file.name,\n        fileSize: file.size,\n        chunksCount: totalChunks,\n        startTime,\n        status: 'completed'\n      });\n      \n      return finalizeResult;\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      \n      // Track failed upload\n      await this.trackVideoUpload('failed', {\n        sessionId,\n        userId: 'SDK',\n        videoId: 0,\n        filename: file.name,\n        fileSize: file.size,\n        chunksCount: 0,\n        startTime,\n        status: 'failed'\n      });\n      \n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n\n  private async trackVideoUpload(action: string, sessionData: any) {\n    log(\"Tracking video upload:\", action, sessionData);\n    \n    try {\n      let endpoint = '';\n      let method = 'POST';\n      let requestBody: any;\n      const baseUrl = 'https://api1.videonest.co';\n  \n      if (action === 'start') {\n        // CREATE new session\n        endpoint = '/video-stats/upload-sessions';\n        method = 'POST';\n        requestBody = {\n          session_id: sessionData.sessionId,\n          user_id: sessionData.userId,\n          video_id: sessionData.videoId || 0, // Will be updated later\n          filename: sessionData.filename,\n          file_size: sessionData.fileSize,\n          chunks_count: sessionData.chunksCount || 0,\n          status: 'in_progress'\n          // start_time will default to NOW() in the API\n        };\n      } else if (action === 'complete' || action === 'failed') {\n        // UPDATE existing session\n        endpoint = `/video-stats/upload-sessions/${sessionData.sessionId}`;\n        method = 'POST'; // API uses POST for updates\n        requestBody = {\n          video_id: sessionData.videoId,\n          end_time: new Date().toISOString(),\n          status: sessionData.status\n        };\n        \n        if (sessionData.startTime) {\n          const duration = Date.now() - sessionData.startTime;\n          requestBody.total_duration = `${Math.floor(duration / 1000)} seconds`;\n          \n          // Calculate average speed in Mbps\n          if (sessionData.fileSize && duration > 0) {\n            const speedBps = (sessionData.fileSize * 8) / (duration / 1000); // bits per second\n            requestBody.avg_speed_mbps = parseFloat((speedBps / 1_000_000).toFixed(2)); // Convert to Mbps\n          }\n        }\n      }\n  \n      const url = `${baseUrl}${endpoint}`;\n      log(\"Upload session request:\", { action, url, method, body: requestBody });\n  \n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n\n      // Add authentication headers\n      if (this.config.apiKey) {\n        headers['X-API-Key'] = this.config.apiKey;\n      }\n\n      if (this.config.channelId) {\n        headers['X-Channel-ID'] = this.config.channelId.toString();\n      }\n  \n      const response = await fetch(url, {\n        method,\n        headers,\n        body: JSON.stringify(requestBody),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        log('Failed to track upload session:', errorData);\n        return { success: false, error: 'Failed to track upload session' };\n      }\n  \n      const data = await response.json();\n      return { success: true, ...data };\n    } catch (error) {\n      log('Error tracking upload session:', error instanceof Error ? error.message : String(error));\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to track upload session' };\n    }\n  }\n\n\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n\n\n\n\n\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n      \n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n      \n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n      \n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n\n\n\n\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\n\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":[],"mappings":"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"}