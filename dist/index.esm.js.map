{"version":3,"file":"index.esm.js","sources":["../src/utils/debug.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n    \n    console.log('[videonest-sdk] Debug mode enabled');\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, AuthResponse, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n  private authenticated: boolean = false;\n  private channelId: number = 0;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n  }\n\n  async authenticate(): Promise<AuthResponse> {\n    forceLog('Authenticating with Videonest API...');\n    forceLog('Configuration:', { channelId: this.config.channelId, apiKeyProvided: !!this.config.apiKey });\n    \n    try {\n      forceLog('Making authentication request to https://api1.videonest.co/sdk/authenticate');\n      forceLog('Authentication request data:', { channelId: this.config.channelId, apiKey: this.config.apiKey });\n      const response = await fetch('https://api1.videonest.co/sdk/authenticate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          channelId: this.config.channelId,\n          apiKey: this.config.apiKey\n        }),\n      });\n      \n      forceLog(`Authentication response status: ${response.status}`);\n      const data = await response.json();\n      forceLog('Authentication response data:', data);\n      \n      if (!data.success) {\n        forceLog(`Authentication failed: ${data.message || 'Unknown error'}`);\n        this.authenticated = false;\n        return {\n          success: false,\n          message: data.message || 'Authentication failed'\n        };\n      }\n      \n      forceLog('Authentication successful');\n      this.authenticated = true;\n      this.channelId = this.config.channelId;\n      return {\n        success: true,\n        message: 'Authentication successful'\n      };\n    } catch (error) {\n      log(`Authentication error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      this.authenticated = false;\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Authentication failed'\n      };\n    }\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog('Starting video upload process');\n    forceLog(`File: ${file.name}, size: ${file.size} bytes`);\n    this.checkAuthentication();\n    \n    try {\n      const { \n        metadata, \n        chunkSize = 2 * 1024 * 1024, \n        onProgress = () => {}, \n        thumbnail\n      } = options;\n      \n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        forceLog('Error: Thumbnail is required');\n        throw new Error('Thumbnail is required for video upload');\n      }\n      \n      forceLog('Upload options:', { \n        metadata, \n        chunkSize, \n        hasThumbnail: !!thumbnail\n      });\n      \n      // Generate UUID for this upload\n      const uploadId = this.generateUUID();\n      const totalChunks = Math.ceil(file.size / chunkSize);\n      forceLog(`Generated uploadId: ${uploadId}, total chunks: ${totalChunks}`);\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {\n        ...metadata,\n        channelId: metadata.channelId || this.config.channelId,\n      };\n      forceLog('Upload metadata:', uploadMetadata);\n      \n      // Upload file in chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n        \n        const formData = new FormData();\n        formData.append('chunk', chunk);\n        formData.append('uploadId', uploadId);\n        formData.append('chunkIndex', chunkIndex.toString());\n        formData.append('totalChunks', totalChunks.toString());\n        formData.append('fileName', file.name);\n        formData.append('fileSize', file.size.toString());\n\n        // Lets log ever\n        // Add metadata to the first chunk\n        if (chunkIndex === 0 && uploadMetadata) {\n          formData.append('channelId', uploadMetadata.channelId.toString());\n          if (uploadMetadata.title) formData.append('title', uploadMetadata.title);\n          if (uploadMetadata.description) formData.append('description', uploadMetadata.description);\n          \n          if (uploadMetadata.tags) {\n            // Handle tags that could be either string or array\n            const tagsValue = Array.isArray(uploadMetadata.tags) \n              ? uploadMetadata.tags.join(',') \n              : uploadMetadata.tags;\n              \n            if (tagsValue && tagsValue.length > 0) {\n              formData.append('tags', tagsValue);\n            }\n          }\n        }\n        \n        // Send the chunk\n        forceLog(`Uploading chunk ${chunkIndex + 1}/${totalChunks} (${start}-${end} bytes)`);\n        const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/upload-chunk`, {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Authorization': `Bearer ${this.config.apiKey}`,\n          },\n        });\n        \n        forceLog(`Chunk ${chunkIndex + 1} response status: ${response.status}`);\n        const result = await response.json();\n        forceLog(`Chunk ${chunkIndex + 1} upload result:`, result);\n        \n        if (!result.success) {\n          forceLog(`Chunk ${chunkIndex + 1} upload failed: ${result.message}`);\n          throw new Error(result.message || 'Chunk upload failed');\n        }\n        \n        // Update progress\n        const progress = ((chunkIndex + 1) / totalChunks) * 100;\n        forceLog(`Upload progress: ${progress.toFixed(2)}%`);\n        onProgress(progress);\n      }\n      \n      // Finalize the upload\n      forceLog('All chunks uploaded. Finalizing upload...');\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString() \n      };\n      forceLog('Finalize request data:', finalData);\n      \n      const finalizeResponse = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/finalize`, {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      forceLog(`Finalize response status: ${finalizeResponse.status}`);\n      const finalizeResult = await finalizeResponse.json();\n      forceLog('Finalize response data:', finalizeResult);\n      \n      if (!finalizeResult.success) {\n        forceLog(`Finalization failed: ${finalizeResult.message}`);\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      forceLog('Upload successfully finalized');\n      \n      // Upload the provided thumbnail\n      forceLog('Uploading user-provided thumbnail');\n      await this.uploadThumbnail(thumbnail, finalizeResult.video.id);\n      forceLog('Upload process completed successfully');\n      return finalizeResult;\n    } catch (error) {\n      forceLog(`Upload error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n  private checkAuthentication(): void {\n    forceLog(`Authentication check. Current status: ${this.authenticated ? 'authenticated' : 'not authenticated'}`);\n    if (!this.authenticated) {\n      forceLog('Authentication check failed. Throwing error.');\n      throw new Error('Not authenticated. Call authenticate() first.');\n    }\n    forceLog('Authentication check passed');\n  }\n  \n  \n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    this.checkAuthentication();\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n \n  private generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    this.checkAuthentication();\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    this.checkAuthentication();\n    log('Fetching videos for channel ID:', this.channelId);\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.channelId.toString()}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      log(`Videos list response status: ${response.status}`);\n      const result = await response.json();\n      log('Videos list response data:', result);\n      \n      if (!result.success) {\n        log(`Videos list fetch failed: ${result.message || 'Unknown error'}`);\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n      \n      log(`Successfully retrieved ${result.videos ? result.videos.length : 0} videos`);\n      return result;\n    } catch (error) {\n      log(`Videos list error: ${error instanceof Error ? error.message : 'Unknown error'}`, error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n}","import * as React from 'react';\nimport { getClient } from '../index';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    showVideoDetails?: boolean;\n    width?: string | number;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, style = {} }) => {\n  // Default styles\n  const defaultWidth = '100%';\n  const defaultHeight = '400px';\n  \n  // Use state to track initialization\n  const [sdkInitialized, setSdkInitialized] = React.useState(false);\n  const {primaryColor, secondaryColor, darkMode, showVideoDetails, width} = style;\n  \n  // Check SDK initialization in an effect hook\n  React.useEffect(() => {\n    try {\n      getClient();\n      setSdkInitialized(true);\n    } catch (e) {\n      setSdkInitialized(false);\n    }\n  }, []); // Empty dependency array means this runs once on mount\n  \n  // Build URL with style parameters if provided\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n  \n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showVideoDetails) params.push('show_video_details=true');\n  if (width) params.push(`width=${width}`);\n  \n  // Add search params to URL if any were set\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n  \n  // Render loading or error state when SDK is not initialized\n  if (!sdkInitialized) {\n    return React.createElement('div', null, 'Please initialize Videonest SDK first using authVideonest()');\n  }\n  \n  // Use React.createElement for the iframe for maximum compatibility\n  return React.createElement('iframe', {\n    src: embedUrl,\n    width: style.width || defaultWidth,\n    frameBorder: '0',\n    allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n    allowFullScreen: true,\n    title: `Videonest video ${videoId}`\n  });\n};\n\nexport default VideonestEmbed;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { AuthResponse } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\n\n// Global client instance\nlet clientInstance: VideonestClient | null = null;\n\n\nexport async function authVideonest(\n  channelId: number, \n  apiKey: string\n): Promise<AuthResponse> {\n  clientInstance = new VideonestClient({\n    channelId,\n    apiKey\n  });\n  forceLog('AUTHENTICATE FORCE LOG METHOD CALLED DIRECTLY', clientInstance);\n  \n  return await clientInstance.authenticate();\n}\n\n\nexport function getClient(): VideonestClient {\n  if (!clientInstance) {\n    throw new Error('SDK not initialized. Call authVideonest() first.');\n  }\n  \n  return clientInstance;\n}\n\n\nexport async function uploadVideo(file: File, options: any) {\n  return getClient().uploadVideo(file, options);\n}\n\nexport async function getVideoStatus(videoId: number) {\n    return getClient().getVideoStatus(videoId);\n  }\n\nexport async function listVideos() {\n  return getClient().listVideos();\n}\n\n"],"names":[],"mappings":"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"}