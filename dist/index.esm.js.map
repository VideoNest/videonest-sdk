{"version":3,"file":"index.esm.js","sources":["../src/core/client.ts","../src/index.ts"],"sourcesContent":["import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, AuthResponse, VideoStatus } from '../types';\n\n// Conditionally import fluent-ffmpeg for Node environments\nlet ffmpeg: any;\nif (typeof window === 'undefined') {\n  // This will only execute in Node.js environments\n  ffmpeg = require('fluent-ffmpeg');\n}\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n  private authenticated: boolean = false;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n  }\n\n  async authenticate(): Promise<AuthResponse> {\n    try {\n      const response = await fetch('https://api1.videonest.co/auth/verify-api-key', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          channelId: this.config.channelId,\n          apiKey: this.config.apiKey\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        this.authenticated = false;\n        return {\n          success: false,\n          message: data.message || 'Authentication failed'\n        };\n      }\n      \n      this.authenticated = true;\n      return {\n        success: true,\n        message: 'Authentication successful'\n      };\n    } catch (error) {\n      this.authenticated = false;\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Authentication failed'\n      };\n    }\n  }\n  \n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    this.checkAuthentication();\n    \n    try {\n      const { \n        metadata, \n        chunkSize = 2 * 1024 * 1024, \n        onProgress = () => {}, \n        thumbnail,\n        autoGenerateThumbnail = false\n      } = options;\n      \n      // Generate UUID for this upload\n      const uploadId = this.generateUUID();\n      const totalChunks = Math.ceil(file.size / chunkSize);\n      \n      // Make sure channelId is included in metadata\n      const uploadMetadata = {\n        ...metadata,\n        channelId: metadata.channelId || this.config.channelId,\n      };\n      \n      // Upload file in chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n        \n        const formData = new FormData();\n        formData.append('chunk', chunk);\n        formData.append('uploadId', uploadId);\n        formData.append('chunkIndex', chunkIndex.toString());\n        formData.append('totalChunks', totalChunks.toString());\n        formData.append('fileName', file.name);\n        formData.append('fileSize', file.size.toString());\n        \n        // Add metadata to the first chunk\n        if (chunkIndex === 0 && uploadMetadata) {\n          formData.append('channelId', uploadMetadata.channelId.toString());\n          if (uploadMetadata.title) formData.append('title', uploadMetadata.title);\n          if (uploadMetadata.description) formData.append('description', uploadMetadata.description);\n          \n          if (uploadMetadata.tags) {\n            // Handle tags that could be either string or array\n            const tagsValue = Array.isArray(uploadMetadata.tags) \n              ? uploadMetadata.tags.join(',') \n              : uploadMetadata.tags;\n              \n            if (tagsValue && tagsValue.length > 0) {\n              formData.append('tags', tagsValue);\n            }\n          }\n        }\n        \n        // Send the chunk\n        const response = await fetch('https://api1.videonest.co/upload/videos/upload-chunk', {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Authorization': `Bearer ${this.config.apiKey}`,\n          },\n        });\n        \n        const result = await response.json();\n        if (!result.success) {\n          throw new Error(result.message || 'Chunk upload failed');\n        }\n        \n        // Update progress\n        const progress = ((chunkIndex + 1) / totalChunks) * 100;\n        onProgress(progress);\n      }\n      \n      // Finalize the upload\n      const finalData = { \n        fileName: file.name, \n        uploadId: uploadId,\n        totalChunks: totalChunks.toString() \n      };\n      \n      const finalizeResponse = await fetch('https://api1.videonest.co/videos/finalize', {\n        method: 'POST',\n        body: JSON.stringify(finalData),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const finalizeResult = await finalizeResponse.json();\n      if (!finalizeResult.success) {\n        throw new Error(finalizeResult.message || 'Upload finalization failed');\n      }\n      \n      // Handle thumbnail\n      if (thumbnail) {\n        // User provided a thumbnail, upload it directly\n        await this.uploadThumbnail(uploadMetadata.channelId, thumbnail, finalizeResult.video.id);\n      } else if (autoGenerateThumbnail) {\n        // User wants an auto-generated thumbnail\n        try {\n          const generatedThumbnail = await this.createThumbnailFromVideo(file);\n          await this.uploadThumbnail(uploadMetadata.channelId, generatedThumbnail, finalizeResult.video.id);\n        } catch (thumbnailError) {\n          console.warn('Failed to generate thumbnail:', thumbnailError);\n          // Continue without thumbnail rather than failing the whole upload\n        }\n      }\n      \n      return finalizeResult;\n    } catch (error) {\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload' \n      };\n    }\n  }\n\n  private checkAuthentication(): void {\n    if (!this.authenticated) {\n      throw new Error('Not authenticated. Call authenticate() first.');\n    }\n  }\n  \n  \n  private async uploadThumbnail(channelId: string, thumbnailFile: File, videoId: string): Promise<any> {\n    this.checkAuthentication();\n    \n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/download/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n  \n \n  private generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n \n  private async createThumbnailFromVideo(videoFile: File): Promise<File> {\n    // Check if we're in a browser environment\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      // Browser method using video and canvas\n      return this.createThumbnailInBrowser(videoFile);\n    } else {\n      // Node.js method using fluent-ffmpeg\n      return this.createThumbnailInNode(videoFile);\n    }\n  }\n\n \n  private async createThumbnailInBrowser(videoFile: File): Promise<File> {\n    return new Promise((resolve, reject) => {\n      // Create video element\n      const video = document.createElement('video');\n      video.preload = 'metadata';\n      video.muted = true;\n      video.playsInline = true;\n      \n      // Create object URL from the video file\n      const videoUrl = URL.createObjectURL(videoFile);\n      video.src = videoUrl;\n      \n      // Set up event handlers\n      video.onloadedmetadata = () => {\n        // Seek to the 2 second mark (or video duration if less than 2 seconds)\n        video.currentTime = Math.min(2, video.duration);\n      };\n      \n      video.onseeked = () => {\n        try {\n          // Create canvas with video dimensions\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          \n          if (!ctx) {\n            reject(new Error('Failed to get canvas context'));\n            return;\n          }\n          \n          // Set canvas dimensions to match video\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          \n          // Draw the current frame to the canvas\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n          \n          // Convert canvas to blob\n          canvas.toBlob((blob) => {\n            if (!blob) {\n              reject(new Error('Failed to create thumbnail blob'));\n              return;\n            }\n            \n            // Clean up\n            URL.revokeObjectURL(videoUrl);\n            \n            // Create a File from the Blob\n            const thumbnailFile = new File(\n              [blob], \n              `${videoFile.name.split('.')[0]}_thumbnail.jpg`, \n              { type: 'image/jpeg' }\n            );\n            \n            resolve(thumbnailFile);\n          }, 'image/jpeg', 0.95);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      \n      video.onerror = () => {\n        URL.revokeObjectURL(videoUrl);\n        reject(new Error('Error loading video for thumbnail generation'));\n      };\n      \n      // Start loading\n      video.load();\n    });\n  }\n\n \n  private async createThumbnailInNode(videoFile: File): Promise<File> {\n    return new Promise((resolve, reject) => {\n      if (!ffmpeg) {\n        reject(new Error('fluent-ffmpeg is required for Node.js thumbnail generation. Install it with: npm install fluent-ffmpeg'));\n        return;\n      }\n\n      // Create a temporary file path\n      const os = require('os');\n      const path = require('path');\n      const fs = require('fs');\n      \n      const tempDir = os.tmpdir();\n      const inputPath = path.join(tempDir, videoFile.name);\n      const outputPath = path.join(tempDir, `${path.parse(videoFile.name).name}_thumbnail.jpg`);\n      \n      // Write the file to disk\n      fs.writeFileSync(inputPath, Buffer.from(videoFile as any));\n      \n      // Use ffmpeg to extract the frame at 2 seconds\n      ffmpeg(inputPath)\n        .screenshots({\n          timestamps: [2],\n          filename: path.basename(outputPath),\n          folder: path.dirname(outputPath),\n          size: '?x?'  // Keep original dimensions\n        })\n        .on('end', () => {\n          try {\n            // Read the thumbnail file\n            const thumbnailBuffer = fs.readFileSync(outputPath);\n            \n            // Create a File object from the buffer\n            const thumbnailFile = new File(\n              [thumbnailBuffer], \n              path.basename(outputPath), \n              { type: 'image/jpeg' }\n            );\n            \n            // Clean up temp files\n            fs.unlinkSync(inputPath);\n            fs.unlinkSync(outputPath);\n            \n            resolve(thumbnailFile);\n          } catch (error) {\n            reject(error);\n          }\n        })\n        .on('error', (err: Error) => {\n          // Clean up temp file\n          if (fs.existsSync(inputPath)) {\n            fs.unlinkSync(inputPath);\n          }\n          reject(err);\n        });\n    });\n  }\n\n async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    this.checkAuthentication();\n    \n    try {\n      const response = await fetch(`https://api1.videonest.co/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n      });\n      \n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n      \n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n}","// Main entry point for the Videonest SDK\nimport VideonestClient from './core/client';\nimport { AuthResponse } from './types';\n\nexport * from './types';\n\n// Global client instance\nlet clientInstance: VideonestClient | null = null;\n\n\nexport async function authVideonest(\n  channelId: string, \n  apiKey: string\n): Promise<AuthResponse> {\n  clientInstance = new VideonestClient({\n    channelId,\n    apiKey\n  });\n  \n  return await clientInstance.authenticate();\n}\n\n\nexport function getClient(): VideonestClient {\n  if (!clientInstance) {\n    throw new Error('SDK not initialized. Call authVideonest() first.');\n  }\n  \n  return clientInstance;\n}\n\n\nexport async function uploadVideo(file: File, options: any) {\n  return getClient().uploadVideo(file, options);\n}\n\nexport async function getVideoStatus(videoId: number) {\n    return getClient().getVideoStatus(videoId);\n  }\n\nexport { VideonestClient };"],"names":[],"mappings":"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"}