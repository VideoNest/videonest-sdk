{"version":3,"file":"index.esm.js","sources":["../src/utils/debug.ts","../src/core/client.ts","../src/components/VideonestEmbed.tsx","../src/components/VideonestPreview.tsx","../src/index.ts"],"sourcesContent":["// src/utils/debug.ts\nimport debugModule from 'debug';\n\n// Debug mode configuration (disabled by default)\nlet isDebugEnabled: boolean = false;\n\n// Initialize debug module but don't enable by default\nconst debugInstance = debugModule('videonest-sdk');\n\n/**\n * Enable or disable debug mode for the SDK\n * @param enable Whether to enable debugging (true) or disable it (false)\n */\nexport function setDebugMode(enable: boolean): void {\n  isDebugEnabled = enable;\n  \n  if (enable) {\n    // Enable debug module\n    debugModule.enable('videonest-sdk');\n    \n    // Set localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('debug', 'videonest-sdk');\n    }\n  } else {\n    // Disable debug module\n    debugModule.disable();\n    \n    // Clear localStorage if in browser environment\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem('debug');\n    }\n  }\n}\n\n/**\n * Get current debug mode status\n * @returns Boolean indicating if debug mode is enabled\n */\nexport function isDebugModeEnabled(): boolean {\n  return isDebugEnabled;\n}\n\n/**\n * Log messages only when debug mode is enabled\n */\nexport const log = function(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    debugInstance(message, ...args);\n  }\n};\n\n/**\n * Log messages that should always appear in console when debug mode is enabled,\n * or stay silent when debug mode is disabled\n */\nexport function forceLog(message: string, ...args: any[]): void {\n  if (isDebugEnabled) {\n    console.log(`[videonest-sdk] ${message}`, ...args);\n    debugInstance(message, ...args);\n  }\n}","import { VideonestConfig, VideoMetadata, UploadOptions, UploadResult, VideoStatus } from '../types';\nimport { log, forceLog } from '../utils/debug';\nimport { generateUUID } from '../utils/helpers';\n\nexport default class VideonestClient {\n  private config: VideonestConfig;\n\n  constructor(config: VideonestConfig) {\n    this.config = config;\n    log('VideonestClient initialized with channelId:', config.channelId);\n  }\n\n  /**\n   * Upload video directly to S3 using presigned URLs\n   */\n  private async uploadToS3(\n    file: File,\n    presignedUrls: string[],\n    uploadId: string,\n    s3Key: string,\n    chunkSize: number,\n    onProgress: (progress: number) => void\n  ): Promise<{ success: boolean; uploadId: string; s3Key: string; parts: any[]; error?: string }> {\n    try {\n      const totalParts = presignedUrls.length;\n      const uploadedParts: any[] = [];\n\n      log(`üöÄ Starting S3 upload: ${file.name} (${totalParts} parts)`);\n\n      // Track progress for each chunk\n      const chunkProgress = new Array(totalParts).fill(0);\n\n      const updateOverallProgress = () => {\n        const totalProgress = chunkProgress.reduce((sum, progress) => sum + progress, 0);\n        const overallProgress = totalProgress / totalParts;\n        onProgress(overallProgress);\n      };\n\n      // Upload chunks with controlled concurrency (max 6 chunks at a time)\n      const CONCURRENT_CHUNKS = 6;\n      const MAX_RETRIES = 3;\n      const activeChunks = new Set();\n      const completedParts: any[] = [];\n\n      const uploadChunk = async (index: number, retryCount = 0): Promise<{ PartNumber: number; ETag: string }> => {\n        const presignedUrl = presignedUrls[index];\n        const start = index * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n\n        // Reset progress for this chunk (fixes retry progress calculation)\n        chunkProgress[index] = 0;\n        updateOverallProgress();\n\n        if (chunk.size === 0) {\n          throw new Error(`Empty chunk detected for part ${index + 1}`);\n        }\n\n        return new Promise<{ PartNumber: number; ETag: string }>((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = 60000; // 1 minute timeout (reduced from 5 minutes)\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              chunkProgress[index] = (event.loaded / event.total) * 100;\n              updateOverallProgress();\n            }\n          };\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const etag = xhr.getResponseHeader('ETag');\n              if (!etag) {\n                reject(new Error(`No ETag received for part ${index + 1}`));\n                return;\n              }\n\n              chunkProgress[index] = 100;\n              updateOverallProgress();\n              log(`‚úÖ Chunk ${index + 1}/${totalParts} completed`);\n\n              resolve({\n                PartNumber: index + 1,\n                ETag: etag.replace(/\"/g, '')\n              });\n            } else {\n              reject(new Error(`HTTP ${xhr.status}: Failed to upload part ${index + 1}`));\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(`Network error uploading part ${index + 1}`));\n          xhr.ontimeout = () => reject(new Error(`Timeout uploading part ${index + 1}`));\n\n          xhr.open('PUT', presignedUrl);\n          xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n          xhr.send(chunk);\n        }).catch(async (error) => {\n          // Retry logic\n          if (retryCount < MAX_RETRIES) {\n            log(`‚ö†Ô∏è Chunk ${index + 1} failed, retrying (${retryCount + 1}/${MAX_RETRIES}): ${error.message}`);\n            await new Promise(resolve => setTimeout(resolve, Math.pow(2, retryCount) * 1000)); // Exponential backoff\n            return uploadChunk(index, retryCount + 1);\n          } else {\n            log(`‚ùå Chunk ${index + 1} failed after ${MAX_RETRIES} retries: ${error.message}`);\n            throw error;\n          }\n        });\n      };\n\n      // Process chunks with controlled concurrency\n      for (let i = 0; i < presignedUrls.length; i++) {\n        // Wait if we've hit the concurrency limit\n        if (activeChunks.size >= CONCURRENT_CHUNKS) {\n          await Promise.race(activeChunks);\n        }\n\n        const chunkPromise = uploadChunk(i)\n          .then(result => {\n            completedParts.push(result);\n            log(`üìä Progress: ${completedParts.length}/${totalParts} chunks completed (${Math.round((completedParts.length / totalParts) * 100)}%)`);\n            return result;\n          })\n          .catch(error => {\n            log(`üí• Chunk ${i + 1}/${totalParts} permanently failed: ${error.message}`);\n            throw error;\n          })\n          .finally(() => activeChunks.delete(chunkPromise));\n\n        activeChunks.add(chunkPromise);\n      }\n\n      // Wait for remaining chunks to complete\n      await Promise.all(activeChunks);\n\n      // Sort parts by part number to ensure correct order\n      const sortedParts = completedParts.sort((a, b) => a.PartNumber - b.PartNumber);\n\n      log(`‚úÖ S3 upload completed: ${file.name} (${sortedParts.length} parts)`);\n\n      return {\n        success: true,\n        uploadId: uploadId,\n        s3Key: s3Key,\n        parts: sortedParts\n      };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to upload to S3';\n      log(`‚ùå S3 upload failed: ${errorMessage}`);\n      return {\n        success: false,\n        uploadId: uploadId,\n        s3Key: s3Key,\n        parts: [],\n        error: errorMessage\n      };\n    }\n  }\n\n  /**\n   * Main video upload method\n   */\n  async uploadVideo(file: File, options: UploadOptions): Promise<UploadResult> {\n    forceLog(`üì§ Starting upload: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);\n\n    try {\n      const {\n        metadata,\n        onProgress = (_progress: number, _status: 'uploading' | 'finalizing' | 'failed' | 'stalled') => { },\n        thumbnail\n      } = options;\n\n      // Check if thumbnail is provided\n      if (!thumbnail) {\n        onProgress(0, 'failed');\n        throw new Error('Thumbnail is required for video upload');\n      }\n\n      // Make sure channelId is included in metadata\n      const uploadMetadata = { ...metadata, channelId: this.config.channelId };\n\n      // Step 1: Generate presigned URLs using SDK endpoint\n      const presignedResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/generate-presigned-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileSize: file.size,\n          contentType: file.type,\n          metadata: uploadMetadata\n        })\n      });\n\n      if (!presignedResponse.ok) {\n        throw new Error(`Failed to generate presigned URLs: ${presignedResponse.status}`);\n      }\n\n      const presignedData = await presignedResponse.json();\n\n      if (!presignedData.success) {\n        throw new Error(presignedData.error || 'Failed to generate presigned URLs');\n      }\n\n      onProgress(0, 'uploading');\n\n      const uploadResult = await this.uploadToS3(\n        file,\n        presignedData.presignedUrls,\n        presignedData.uploadId,\n        presignedData.s3Key,\n        presignedData.chunkSize,\n        (progress) => {\n          onProgress(progress, 'uploading');\n        }\n      );\n\n      if (!uploadResult.success) {\n        throw new Error(uploadResult.error || 'S3 upload failed');\n      }\n\n      onProgress(100, 'finalizing');\n\n      // Step 3: Complete upload using SDK endpoint\n      const completeResponse = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/complete-upload`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          uploadId: uploadResult.uploadId,\n          s3Key: uploadResult.s3Key,\n          parts: uploadResult.parts\n        })\n      });\n\n      if (!completeResponse.ok) {\n        throw new Error(`Failed to complete upload: ${completeResponse.status}`);\n      }\n\n      const completeData = await completeResponse.json();\n\n      if (!completeData.success) {\n        throw new Error(completeData.message || 'Upload completion failed');\n      }\n\n      // Step 4: Upload thumbnail using SDK endpoint\n      await this.uploadThumbnail(thumbnail, completeData.data.videoId);\n      forceLog('‚úÖ Upload completed successfully:', completeData.data.videoId);\n\n      return {\n        success: true,\n        message: 'Video uploaded successfully',\n        video: {\n          id: completeData.data.videoId,\n        }\n      };\n\n    } catch (error) {\n      forceLog(`‚ùå Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'An unexpected error occurred during upload'\n      };\n    }\n  }\n\n  /**\n   * Upload thumbnail to the video\n   */\n  private async uploadThumbnail(thumbnailFile: File, videoId: string): Promise<any> {\n    const formData = new FormData();\n    formData.append('thumbnail', thumbnailFile);\n\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/send-thumbnail`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Thumbnail upload failed');\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to upload thumbnail');\n    }\n  }\n\n  /**\n   * Get video status\n   */\n  async getVideoStatus(videoId: number): Promise<VideoStatus> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos/${videoId}/status`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.message || 'Failed to get video status');\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to get video status');\n    }\n  }\n\n  /**\n   * List all videos in the channel\n   */\n  async listVideos(): Promise<{ success: boolean, videos?: any[], message?: string }> {\n    try {\n      const response = await fetch(`https://api1.videonest.co/sdk/${this.config.channelId}/videos`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        return {\n          success: false,\n          message: result.message || 'Failed to retrieve videos'\n        };\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to retrieve videos'\n      };\n    }\n  }\n}","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestEmbedProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestEmbed: React.FC<VideonestEmbedProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/single/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestEmbed;","import * as React from 'react';\nimport { VideonestConfig } from '../types';\nimport { log, forceLog } from '../utils/debug';\n\ninterface VideonestPreviewProps {\n  videoId: number;\n  config: VideonestConfig;\n  style?: {\n    secondaryColor?: string;\n    primaryColor?: string;\n    darkMode?: boolean;\n    width?: string | number;\n    height?: string | number;\n    showTitle?: boolean;\n    showDescription?: boolean;\n  };\n}\n\nconst VideonestPreview: React.FC<VideonestPreviewProps> = ({ videoId, config, style = {} }) => {\n  const { primaryColor, secondaryColor, darkMode, width, height, showTitle, showDescription } = style;\n\n  let embedUrl = `https://app.videonest.co/embed/preview/${videoId}`;\n  const params: string[] = [];\n\n  if (primaryColor) params.push(`primary_color=${primaryColor.replace('#', '')}`);\n  if (secondaryColor) params.push(`secondary_color=${secondaryColor.replace('#', '')}`);\n  if (darkMode) params.push('dark_mode=true');\n  if (showTitle) params.push('show_title=true');\n  if (showDescription) params.push('show_description=true');\n  \n  // Add authentication parameters\n  // new version\n  params.push(`channel_id=${config.channelId}`);\n  params.push(`api_key=${config.apiKey}`);\n\n  if (params.length > 0) {\n    embedUrl += `?${params.join('&')}`;\n  }\n\n  return (\n    <iframe\n        src={embedUrl}\n        style={{width: width || '100%', height: height || '100%'}}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        title={`Videonest video ${videoId}`}\n      />\n  );\n};\n\nexport default VideonestPreview;","import { log, forceLog, setDebugMode, isDebugModeEnabled } from './utils/debug';\nimport VideonestClient from './core/client';\nimport { VideonestConfig } from './types';\nimport VideonestEmbed from './components/VideonestEmbed';\nimport VideonestPreview from './components/VideonestPreview';\n\nexport * from './types';\nexport { setDebugMode, isDebugModeEnabled } from './utils/debug';\n\nexport { VideonestEmbed }; // Export the component\nexport { VideonestPreview }; // Export the component\n/**\n * Upload a video to VideoNest\n * @param file The video file to upload\n * @param options Upload options including metadata\n * @param config VideoNest configuration with channelId and apiKey\n */\n// Minor\nexport async function uploadVideo(file: File, options: any, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.uploadVideo(file, options);\n}\n\n/**\n * Get the status of a video\n * @param videoId The ID of the video to check status\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function getVideoStatus(videoId: number, config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.getVideoStatus(videoId);\n}\n\n/**\n * List all videos for the channel\n * @param config VideoNest configuration with channelId and apiKey\n */\nexport async function listVideos(config: VideonestConfig) {\n  const client = new VideonestClient(config);\n  return client.listVideos();\n}\n\n"],"names":[],"mappings":"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"}